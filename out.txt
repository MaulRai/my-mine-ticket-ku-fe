::::::::::::::
app/events/loading.tsx
::::::::::::::
export default function Loading() {
  return null
}
::::::::::::::
app/events/page.tsx
::::::::::::::
"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import Link from "next/link"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Search, MapPin, Calendar, ChevronLeft, ChevronRight } from "lucide-react"
import { allEvents, featuredEvents } from "@/lib/events-data"

const categories = ["Semua", "Musik", "Seni & Pameran", "Olahraga"]

export default function EventsPage() {
  const [currentBannerIndex, setCurrentBannerIndex] = useState(0)
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("Semua")
  const [selectedTimeFilter, setSelectedTimeFilter] = useState("Semua")
  const [progress, setProgress] = useState(0)

  useEffect(() => {
    setProgress(0)
    const progressInterval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) return 100
        return prev + 100 / 50
      })
    }, 100)
    return () => clearInterval(progressInterval)
  }, [currentBannerIndex])

  useEffect(() => {
    const interval = setInterval(() => {
      const nextIndex = (currentBannerIndex + 1) % featuredEvents.length
      setIsTransitioning(true)
      setTimeout(() => {
        setCurrentBannerIndex(nextIndex)
        setIsTransitioning(false)
      }, 300)
    }, 5000)
    return () => clearInterval(interval)
  }, [currentBannerIndex])

  const handlePrevBanner = () => {
    const nextIndex = (currentBannerIndex - 1 + featuredEvents.length) % featuredEvents.length
    setIsTransitioning(true)
    setTimeout(() => {
      setCurrentBannerIndex(nextIndex)
      setIsTransitioning(false)
    }, 600)
  }

  const handleNextBanner = () => {
    const nextIndex = (currentBannerIndex + 1) % featuredEvents.length
    setIsTransitioning(true)
    setTimeout(() => {
      setCurrentBannerIndex(nextIndex)
      setIsTransitioning(false)
    }, 600)
  }

  // Helper function to parse Indonesian date format
  const parseIndonesianDate = (dateString: string): Date => {
    const monthMap: Record<string, number> = {
      Januari: 0,
      Februari: 1,
      Maret: 2,
      April: 3,
      Mei: 4,
      Juni: 5,
      Juli: 6,
      Agustus: 7,
      September: 8,
      Oktober: 9,
      November: 10,
      Desember: 11,
    }

    const parts = dateString.split(" ")
    const day = parseInt(parts[0])
    const month = monthMap[parts[1]]
    const year = parseInt(parts[2])

    return new Date(year, month, day)
  }

  const filterEventsByTime = (event: typeof allEvents[0]) => {
    const eventDate = parseIndonesianDate(event.date)
    const today = new Date()
    today.setHours(0, 0, 0, 0) // Reset time to start of day

    if (selectedTimeFilter === "Seminggu ke Depan") {
      const oneWeekFromNow = new Date(today)
      oneWeekFromNow.setDate(today.getDate() + 7)
      return eventDate >= today && eventDate <= oneWeekFromNow
    } else if (selectedTimeFilter === "Sebulan ke Depan") {
      const oneMonthFromNow = new Date(today)
      oneMonthFromNow.setMonth(today.getMonth() + 1)
      return eventDate >= today && eventDate <= oneMonthFromNow
    }
    // "Semua" filter
    return true
  }

  const filteredEvents = allEvents.filter((event) => {
    const matchesSearch = event.name.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesCategory = selectedCategory === "Semua" || event.category === selectedCategory
    const matchesTime = filterEventsByTime(event)
    return matchesSearch && matchesCategory && matchesTime
  })

  const currentFeaturedEvent = featuredEvents[currentBannerIndex]

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#000000] via-[#000a1a] to-[#000000]">
      <div className="relative h-[400px] m-4 sm:m-6 md:m-8 my-4 overflow-visible rounded-2xl bg-black">
        {/* Background image */}
        <div className={`transition-opacity duration-300 ${isTransitioning ? "opacity-0" : "opacity-100"}`}>
          <Image
            src={currentFeaturedEvent.banner || "/placeholder.svg"}
            alt="Banner background"
            fill
            className="object-cover rounded-2xl"
          />
        </div>
        <div className="absolute inset-0 bg-gradient-to-b from-black/20 via-black/20 via-80% to-black/30 rounded-2xl" />
        <div
          className={`absolute inset-0 flex items-center justify-start transition-opacity duration-300 ${isTransitioning ? "opacity-0" : "opacity-100"}`}
        >
          <div className="text-center text-white px-4 sm:px-8 md:px-12 lg:px-24 flex flex-col sm:flex-row gap-4 sm:gap-6 w-full">
            <div className="mb-4 sm:mb-6 flex justify-center sm:justify-start">
              <div className="relative h-20 w-20 sm:h-28 sm:w-28 md:h-32 md:w-32 rounded-lg overflow-hidden shadow-2xl">
                <Image
                  src={currentFeaturedEvent.logo || "/placeholder.svg"}
                  alt={currentFeaturedEvent.name}
                  fill
                  className="object-cover"
                />
              </div>
            </div>

            <div className="items-start text-center sm:text-left sm:ml-0 md:ml-6 flex-1">
              <h1 className="text-xl sm:text-2xl md:text-3xl font-heading mb-2 sm:mb-3 md:mb-4">{currentFeaturedEvent.name}</h1>
              <div className="mb-2 sm:mb-3 md:mb-4">
                <p className="text-sm sm:text-base md:text-lg font-subheading font-semibold">{currentFeaturedEvent.featuring.join(", ")}</p>
              </div>
              <div className="glass-fx inline-flex flex-col sm:flex-row items-center gap-2 sm:gap-4 md:gap-6 text-xs sm:text-sm font-subheading font-semibold w-auto px-3 py-2">
                <div className="flex items-center gap-2">
                  <MapPin className="h-3 w-3 sm:h-4 sm:w-4" />
                  <span>{currentFeaturedEvent.location}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Calendar className="h-3 w-3 sm:h-4 sm:w-4" />
                  <span>{currentFeaturedEvent.date}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Navigation Buttons */}
        <button
          onClick={handlePrevBanner}
          className="glass-fx absolute left-2 sm:left-4 top-1/2 -translate-y-1/2 p-2 sm:p-3 rounded-full hover:bg-white/30 transition-all"
          aria-label="Previous banner"
        >
          <ChevronLeft className="h-5 w-5 sm:h-6 sm:w-6 text-white" />
        </button>
        <button
          onClick={handleNextBanner}
          className="glass-fx absolute right-2 sm:right-4 top-1/2 -translate-y-1/2 p-2 sm:p-3 rounded-full hover:bg-white/30 transition-all"
          aria-label="Next banner"
        >
          <ChevronRight className="h-5 w-5 sm:h-6 sm:w-6 text-white" />
        </button>

        <div className="absolute bottom-16 sm:bottom-20 left-1/2 -translate-x-1/2 w-full max-w-xs sm:max-w-md md:max-w-2xl px-4 sm:px-8">
          <div className="flex gap-1.5 sm:gap-2">
            {featuredEvents.map((_, index) => (
              <div key={index} className="flex-1 h-1 bg-white/20 rounded-full overflow-hidden">
                <div
                  className="h-full bg-white rounded-full transition-all duration-100 ease-linear"
                  style={{
                    width:
                      index < currentBannerIndex
                        ? "100%" // Completed slides
                        : index === currentBannerIndex
                          ? `${progress}%` // Current slide with progress
                          : "0%", // Upcoming slides
                  }}
                />
              </div>
            ))}
          </div>
        </div>

        {/* Search Bar Overlay */}
        <div className="absolute -bottom-6 left-1/2 -translate-x-1/2 w-full max-w-xs sm:max-w-md md:max-w-2xl px-4 sm:px-8">
          <div className="clear-glass-fx bg-black/60 p-1.5 sm:p-2">
            <div className="relative">
              <Search className="absolute left-2 sm:left-3 top-1/2 -translate-y-1/2 h-4 w-4 sm:h-5 sm:w-5 text-white/70" />
              <Input
                type="text"
                placeholder="Cari acara..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-8 sm:pl-10 h-10 sm:h-12 text-sm sm:text-base bg-transparent border-none text-white placeholder:text-white/60 focus-visible:ring-0 focus-visible:ring-offset-0"
              />
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        <div className="mb-6 flex flex-col sm:flex-row justify-between items-stretch sm:items-center gap-3 sm:gap-4">
          {/* Time Filter Buttons - Left */}
          <div className="inline-flex items-center gap-1 bg-gray-900/60 backdrop-blur-md border border-white/10 p-1.5 rounded-full w-full sm:w-auto justify-center">
            {["Semua", "Seminggu ke Depan", "Sebulan ke Depan"].map((timeFilter) => {
              const isActive = selectedTimeFilter === timeFilter
              return (
                <Button
                  key={timeFilter}
                  variant="ghost"
                  onClick={() => setSelectedTimeFilter(timeFilter)}
                  className={`relative rounded-full px-3 sm:px-4 py-1.5 text-xs sm:text-sm font-medium transition-all duration-300 flex-1 sm:flex-initial
                    ${
                      isActive
                        ? "text-white shadow-md bg-gradient-to-b from-gray-400 via-gray-600 to-gray-700"
                        : "text-gray-300 hover:text-white hover:bg-white/10"
                    }`}
                >
                  {timeFilter}
                </Button>
              )
            })}
          </div>

          {/* Category Dropdown - Right */}
          <div className="relative w-full sm:w-fit">
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="h-10 px-4 sm:px-5 pr-10 rounded-full bg-gradient-to-b from-gray-300/60 via-gray-500/60 to-gray-700/60 border border-none text-white text-sm sm:text-base font-medium backdrop-blur-md cursor-pointer appearance-none transition-all duration-200 focus:ring-2 focus:ring-white/30 hover:from-gray-200/70 hover:to-gray-600/70 w-full sm:w-auto"
            >
              {categories.map((category) => (
                <option key={category} value={category} className="bg-gray-800 text-white">
                  {category}
                </option>
              ))}
            </select>

            {/* Custom caret icon */}
            <div className="absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none">
              <svg className="h-4 w-4 text-white/80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-5 md:gap-6">
          {filteredEvents.map((event) => (
            <Link key={event.id} href={`/events/${event.id}`}>
              <Card className="group overflow-hidden pb-0 border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all duration-300 hover:shadow-2xl hover:shadow-white/5 cursor-pointer hover:-translate-y-1">
                <div className="relative h-40 sm:h-44 md:h-48 w-full overflow-hidden">
                  <Image
                    src={event.logo || "/placeholder.svg"}
                    alt={event.name}
                    fill
                    className="object-cover transition-transform duration-500 group-hover:scale-110"
                  />
                  {/* Gradient overlay for better text contrast */}
                  <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-60 group-hover:opacity-40 transition-opacity duration-300" />

                  {/* Category badge positioned on image */}
                  <div className="absolute top-2 sm:top-3 right-2 sm:right-3">
                    <Badge className="glass-fx text-white border-white/30 font-subheading font-semibold text-xs px-2 sm:px-3 py-0.5 sm:py-1">
                      {event.category}
                    </Badge>
                  </div>
                </div>

                <CardContent className="p-4 sm:p-5 space-y-2 sm:space-y-3">
                  <h3 className="font-subheading font-semibold text-base sm:text-lg text-white leading-tight line-clamp-2 group-hover:text-gray-100 transition-colors">
                    {event.name}
                  </h3>

                  <div className="space-y-2 sm:space-y-2.5 text-xs sm:text-sm">
                    <div className="flex items-center gap-2 sm:gap-2.5 text-gray-300 group-hover:text-white transition-colors">
                      <div className="flex items-center justify-center w-7 h-7 sm:w-8 sm:h-8 rounded-full bg-white/5 border border-white/10 group-hover:bg-white/10 transition-colors shrink-0">
                        <MapPin className="h-3.5 w-3.5 sm:h-4 sm:w-4" />
                      </div>
                      <span className="font-subheading font-medium truncate">{event.location}</span>
                    </div>

                    <div className="flex items-center gap-2 sm:gap-2.5 text-gray-300 group-hover:text-white transition-colors">
                      <div className="flex items-center justify-center w-7 h-7 sm:w-8 sm:h-8 rounded-full bg-white/5 border border-white/10 group-hover:bg-white/10 transition-colors shrink-0">
                        <Calendar className="h-3.5 w-3.5 sm:h-4 sm:w-4" />
                      </div>
                      <span className="font-subheading font-medium">{event.date}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </Link>
          ))}
        </div>

        {filteredEvents.length === 0 && (
          <div className="text-center py-12">
            <p className="text-muted-foreground text-sm sm:text-base md:text-lg">Tidak ada acara yang sesuai dengan kriteria Anda.</p>
          </div>
        )}
      </div>
    </div>
  )
}
::::::::::::::
app/explore-tickets/loading.tsx
::::::::::::::
export default function Loading() {
  return null
}
::::::::::::::
app/explore-tickets/page.tsx
::::::::::::::
"use client"

import { useState, type FormEvent } from "react"
import { useRouter } from "next/navigation"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Search, Shuffle } from "lucide-react"

export default function ExploreTicketsPage() {
  const [ticketId, setTicketId] = useState("")
  const router = useRouter()

  const handleSearch = (e: FormEvent) => {
    e.preventDefault()
    if (ticketId.trim()) {
      router.push(`/tickets/${ticketId.trim()}`)
    }
  }

  const handleRandomTicket = () => {
    // Generate a random ticket ID for demonstration
    // In production, this would fetch a real recently issued ticket ID from your backend
    const randomId = Math.floor(Math.random() * 10000).toString()
    router.push(`/tickets/${randomId}`)
  }

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-[#0a0a0a] via-[#1a0a2e] to-[#0a0a0a]">
      {/* Ambient animated background */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 -left-1/2 w-full h-full bg-gradient-radial from-purple-500/10 to-transparent animate-pulse-slow" />
        <div className="absolute -bottom-1/2 -right-1/2 w-full h-full bg-gradient-radial from-purple-400/8 to-transparent animate-pulse-slow animation-delay-2000" />
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-purple-500/5 rounded-full blur-3xl animate-float" />
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-400/5 rounded-full blur-3xl animate-float animation-delay-4000" />
      </div>

      {/* Content */}
      <div className="relative z-10 flex flex-col items-center justify-center min-h-screen px-4 py-16 mt-16">
        <div className="max-w-4xl w-full space-y-12 text-center">
          {/* Header */}
          <div className="space-y-6">
            <h1 className="font-heading text-5xl md:text-7xl text-white tracking-tight">Jelajahi Tiket</h1>
            <p className="font-body text-xl md:text-2xl text-gray-300 leading-relaxed max-w-3xl mx-auto">
              Jadilah saksi <span className="font-bold text-white">#RevolusiTiketing</span> secara langsung. <span className="italic">ticketing</span> NFT
              menghadirkan manfaat <span className="italic">blockchain</span> untuk audiens global. Jelajahi Ekosistem <span className="italic">ticketing</span> Terbuka yang lengkap: dari
              statistik <span className="italic">real-time</span> hingga siklus hidup lengkap dan verifikasi keaslian tiket individual.
            </p>
          </div>

          {/* Search Bar */}
          <div className="max-w-2xl mx-auto">
            <form onSubmit={handleSearch} className="relative">
              <div className="glass-fx bg-black/40 p-2 rounded-2xl">
                <div className="flex gap-2">
                  <div className="relative flex-1">
                    <Search className="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                    <Input
                      type="text"
                      placeholder="Masukkan identifier Tiket NFT..."
                      value={ticketId}
                      onChange={(e) => setTicketId(e.target.value)}
                      className="pl-12 pr-4 py-6 text-lg bg-black/50 border-white/10 text-white placeholder:text-gray-500 focus:bg-black/60 focus:border-purple-500/30 transition-all"
                    />
                  </div>
                  <Button
                    type="submit"
                    size="lg"
                    className="px-8 py-6 bg-gradient-to-r from-purple-600/80 to-purple-500/80 hover:from-purple-600 hover:to-purple-500 text-white font-semibold shadow-lg shadow-purple-500/20 transition-all"
                  >
                    Cari
                  </Button>
                </div>
              </div>
            </form>
          </div>

          {/* Random Button Section */}
          <div className="space-y-4">
            <p className="font-body text-lg text-gray-400">
              Tidak punya <span className="italic">identifier</span> tiket? Temukan tiket NFT yang baru diterbitkan dan jelajahi perjalanan lengkapnya
              dari pembuatan hingga status saat ini.
            </p>
            <Button
              onClick={handleRandomTicket}
              size="lg"
              variant="outline"
              className="px-8 py-6 bg-black/40 border-2 border-white/20 hover:bg-black/60 hover:border-purple-500/50 text-white hover:text-purple-500 font-semibold backdrop-blur-sm transition-all group"
            >
              <Shuffle className="w-5 h-5 mr-2 group-hover:rotate-180 transition-transform duration-500" />
              Lihat Tiket Acak
            </Button>
          </div>

          {/* Feature Cards */}
          <div className="grid md:grid-cols-3 gap-6 mt-16">
            <div className="clear-glass-fx bg-black/40 p-6 rounded-xl space-y-3 border border-white/10">
              <div className="w-24 h-24 rounded-lg flex items-center justify-center mx-auto">
                <Image
                  src="/images/explore-tickets/illustration-1.png"
                  alt="Blockchain Verification"
                  width={80}
                  height={80}
                  className="object-contain"
                />
              </div>
              <h3 className="font-subheading text-xl font-semibold text-white">Terverifikasi Blockchain</h3>
              <p className="font-body text-gray-400 text-sm leading-relaxed">
                Setiap tiket diamankan secara kriptografi dan dapat diverifikasi di blockchain
              </p>
            </div>
            <div className="clear-glass-fx bg-black/40 p-6 rounded-xl space-y-3 border border-white/10">
              <div className="w-24 h-24 rounded-lg flex items-center justify-center mx-auto">
                <Image
                  src="/images/explore-tickets/illustration-3.png"
                  alt="Real-Time Tracking"
                  width={80}
                  height={80}
                  className="object-contain"
                />
              </div>
              <h3 className="font-subheading text-xl font-semibold text-white">Pelacakan Real-Time</h3>
              <p className="font-body text-gray-400 text-sm leading-relaxed">
                Pantau peristiwa siklus hidup tiket dan transfer kepemilikan secara real-time
              </p>
            </div>
            <div className="clear-glass-fx bg-black/40 p-6 rounded-xl space-y-3 border border-white/10">
              <div className="w-24 h-24 rounded-lg flex items-center justify-center mx-auto">
                <Image
                  src="/images/explore-tickets/illustration-2.png"
                  alt="Guaranteed Authenticity"
                  width={80}
                  height={80}
                  className="object-contain"
                />
              </div>
              <h3 className="font-subheading text-xl font-semibold text-white">Keaslian Terjamin</h3>
              <p className="font-body text-gray-400 text-sm leading-relaxed">
                Hilangkan penipuan dengan bukti keaslian dan kepemilikan tiket yang tidak dapat diubah
              </p>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes pulse-slow {
          0%, 100% { opacity: 0.3; }
          50% { opacity: 0.6; }
        }
        @keyframes float {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-20px); }
        }
        .animate-pulse-slow {
          animation: pulse-slow 8s ease-in-out infinite;
        }
        .animate-float {
          animation: float 6s ease-in-out infinite;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
        .bg-gradient-radial {
          background: radial-gradient(circle, var(--tw-gradient-stops));
        }
      `}</style>
    </div>
  )
}
::::::::::::::
app/login/page.tsx
::::::::::::::
"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { apiClient } from "@/lib/api"
import { Loader2 } from "lucide-react"

export default function LoginPage() {
  const router = useRouter()
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [rememberMe, setRememberMe] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError(null)

    try {
      const response = await apiClient.login(email, password)
      
      if (response.token) {
        apiClient.setToken(response.token)
        
        if (response.user.role === 'ADMIN') {
          router.push('/admin/dashboard')
        } else if (response.user.role === 'EO') {
          router.push('/eo/dashboard')
        } else {
          router.push('/events')
        }
      }
    } catch (err: any) {
      console.error('Login error:', err)
      setError(err.message || 'Login failed. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-[#0a0a0a] via-[#1a0a2e] to-[#0a0a0a]">
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 -left-1/2 h-[200%] w-[200%] animate-spin-slow bg-gradient-to-r from-purple-500/10 via-transparent to-blue-500/10" />
        <div className="absolute top-1/4 right-1/4 h-96 w-96 animate-pulse rounded-full bg-purple-500/5 blur-3xl" />
        <div className="absolute bottom-1/4 left-1/4 h-96 w-96 animate-pulse rounded-full bg-blue-500/5 blur-3xl" />
      </div>

      {/* Bottom right overlay */}
      <div className="absolute bottom-0 right-0 w-3/4 h-3/4 pointer-events-none">
        <Image 
          src="/images/overlay-5.png" 
          alt="" 
          fill 
          className="object-contain object-bottom-right opacity-60"
        />
      </div>

      <div className="relative z-10 flex min-h-screen items-center justify-center px-4 py-12">
        <div className="w-full max-w-md">
          <div className="mb-8 flex justify-center">
            <Image src="/images/app-logo.png" alt="App Logo" width={400} height={80} className="h-auto w-100" />
          </div>
          
          <div className="glass-fx p-8">
            <div className="mb-8 text-center">
              <h1 className="font-heading mb-2 text-2xl text-white">Selamat Datang Kembali!</h1>
              <p className="font-body text-white/60">Masuk untuk mengakses tiket Anda</p>
            </div>

            {error && (
              <div className="mb-6 p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
                <p className="text-red-400 font-body text-sm">{error}</p>
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email" className="font-body text-sm font-medium text-white/90">
                  Alamat Email
                </Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="awak@misalan.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="password" className="font-body text-sm font-medium text-white/90">
                  Kata Sandi
                </Label>
                <Input
                  id="password"
                  type="password"
                  placeholder="••••••••"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="remember"
                    checked={rememberMe}
                    onCheckedChange={(checked) => setRememberMe(checked as boolean)}
                    disabled={isLoading}
                    className="border-white/20 data-[state=checked]:bg-purple-500 data-[state=checked]:border-purple-500"
                  />
                  <Label htmlFor="remember" className="font-body text-sm text-white/70 cursor-pointer">
                    Ingat saya
                  </Label>
                </div>
                <Link href="#" className="font-body text-sm text-purple-400 hover:text-purple-300 transition-colors">
                  Lupa kata sandi?
                </Link>
              </div>

              <Button
                type="submit"
                disabled={isLoading}
                className="font-body w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 transition-all duration-300 shadow-lg shadow-purple-500/20"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Masuk...
                  </>
                ) : (
                  'Masuk'
                )}
              </Button>
            </form>

            <p className="font-body mt-6 text-center text-sm text-white/60">
              Belum punya akun?{" "}
              <Link href="/register" className="text-purple-400 hover:text-purple-300 transition-colors">
                Daftar
              </Link>
            </p>
          </div>

          <div className="mt-4">
            <Link href="/">
              <Button
                variant="outline"
                className="border-white/20 bg-white/5 hover:bg-white/10 text-white hover:text-purple-500 font-body text-sm"
              >
                ← Kembali ke Landing Page
              </Button>
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}::::::::::::::
app/profile/page.tsx
::::::::::::::
"use client"

import { useState, useEffect, Suspense } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import Image from "next/image"
import { motion, AnimatePresence } from "framer-motion"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Wallet, ArrowUpRight, ArrowDownLeft, Plus, ExternalLink, Ticket } from "lucide-react"

type Tab = "my-tickets" | "wallet-info"

// Mock wallet data
const connectedWallets = [
  {
    id: 1,
    name: "MetaMask",
    address: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb",
    balance: "2.45 ETH",
    balanceUSD: "$4,890.00",
    type: "Ethereum",
    isDefault: true,
  },
  {
    id: 2,
    name: "Phantom",
    address: "9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin",
    balance: "125.30 SOL",
    balanceUSD: "$2,506.00",
    type: "Solana",
    isDefault: false,
  },
  {
    id: 3,
    name: "Coinbase Wallet",
    address: "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
    balance: "0.15 BTC",
    balanceUSD: "$6,450.00",
    type: "Bitcoin",
    isDefault: false,
  },
]

// Mock transaction history
const transactions = [
  {
    id: 1,
    type: "purchase",
    description: "Neon Waves Festival - VIP Ticket",
    amount: "-0.25 ETH",
    amountUSD: "-$500.00",
    date: "2025-10-20",
    time: "14:32",
    status: "completed",
    wallet: "MetaMask",
  },
  {
    id: 2,
    type: "deposit",
    description: "Deposit from Bank Account",
    amount: "+1.00 ETH",
    amountUSD: "+$2,000.00",
    date: "2025-10-18",
    time: "09:15",
    status: "completed",
    wallet: "MetaMask",
  },
  {
    id: 3,
    type: "purchase",
    description: "Islands of Sound 2025 - General Admission",
    amount: "-45.00 SOL",
    amountUSD: "-$900.00",
    date: "2025-10-15",
    time: "16:45",
    status: "completed",
    wallet: "Phantom",
  },
  {
    id: 4,
    type: "sale",
    description: "Resale: Rock Concert Night - Standard",
    amount: "+0.18 ETH",
    amountUSD: "+$360.00",
    date: "2025-10-12",
    time: "11:20",
    status: "completed",
    wallet: "MetaMask",
  },
  {
    id: 5,
    type: "purchase",
    description: "Sonic Future Conference - Early Bird",
    amount: "-0.12 ETH",
    amountUSD: "-$240.00",
    date: "2025-10-10",
    time: "13:55",
    status: "completed",
    wallet: "MetaMask",
  },
  {
    id: 6,
    type: "withdrawal",
    description: "Withdrawal to Bank Account",
    amount: "-0.50 ETH",
    amountUSD: "-$1,000.00",
    date: "2025-10-08",
    time: "10:30",
    status: "pending",
    wallet: "MetaMask",
  },
]

// Mock ticket data with NFT codes and status
const myTickets = [
  {
    id: 1,
    eventName: "Neon Waves Festival",
    eventCover: "/images/example/cover-1.png",
    ticketCategory: "VIP",
    nftCode: "NFT-23A91F8C4D2E",
    purchaseDate: "2025-10-20",
    status: "active",
  },
  {
    id: 2,
    eventName: "Islands of Sound 2025",
    eventCover: "/images/example/cover-2.png",
    ticketCategory: "Regular",
    nftCode: "NFT-7B5E9A1C3F6D",
    purchaseDate: "2025-10-15",
    status: "active",
  },
  {
    id: 3,
    eventName: "Sonic Future Conference",
    eventCover: "/images/example/cover-3.png",
    ticketCategory: "VIP",
    nftCode: "NFT-4D8F2A6B9E1C",
    purchaseDate: "2025-09-28",
    status: "used",
  },
  {
    id: 4,
    eventName: "Taste & Tunes Fest",
    eventCover: "/images/example/cover-4.png",
    ticketCategory: "Regular",
    nftCode: "NFT-9C3E7F1A5B8D",
    purchaseDate: "2025-09-15",
    status: "active",
  },
  {
    id: 5,
    eventName: "Rhythm Arena 2025",
    eventCover: "/images/example/cover-5.png",
    ticketCategory: "VIP",
    nftCode: "NFT-6A2D8E4C1F9B",
    purchaseDate: "2025-08-30",
    status: "used",
  },
  {
    id: 6,
    eventName: "Rock Concert Night",
    eventCover: "/images/example/example-cover.png",
    ticketCategory: "Regular",
    nftCode: "NFT-1F7B3D9A5E2C",
    purchaseDate: "2025-08-12",
    status: "active",
  },
]

function ProfileContent() {
  const [activeTab, setActiveTab] = useState<Tab>("wallet-info")
  const router = useRouter()
  const searchParams = useSearchParams()

  useEffect(() => {
    const tab = searchParams.get("tab")
    if (tab === "my-tickets") {
      setActiveTab("my-tickets")
    }
  }, [searchParams])

  return (
    <div className="min-h-screen bg-background pt-32 pb-12 relative overflow-hidden">
      {/* Dark Magenta Ambient Background */}
      <div className="fixed inset-0 overflow-hidden opacity-70 pointer-events-none">
        <div className="absolute top-0 -left-1/3 w-2/3 h-full bg-gradient-radial from-fuchsia-700/80 to-transparent animate-pulse-slow" />
        <div className="absolute bottom-0 -right-1/3 w-2/3 h-full bg-gradient-radial from-purple-700/60 to-transparent animate-pulse-slow animation-delay-2000" />
        <div className="absolute top-1/4 -left-48 w-96 h-96 bg-fuchsia-600/40 rounded-full blur-3xl animate-float-drift" />
        <div className="absolute bottom-1/4 -right-48 w-96 h-96 bg-purple-600/40 rounded-full blur-3xl animate-float-drift animation-delay-4000" />
      </div>

      <div className="container mx-auto px-4 max-w-6xl relative z-10">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-heading text-white mb-2">Profil Saya</h1>
          <p className="text-gray-400 font-body">Kelola tiket dan informasi dompet Anda</p>
        </div>

        {/* Tab Navigation */}
        <div className="mb-8">
          <div className="inline-flex items-center gap-1 bg-gray-900/60 backdrop-blur-md border border-white/10 p-1.5 rounded-full">
            <Button
              variant="ghost"
              onClick={() => setActiveTab("wallet-info")}
              className={`relative rounded-full px-6 py-2 text-sm font-subheading font-medium transition-all duration-300
                ${
                  activeTab === "wallet-info"
                    ? "text-white shadow-md bg-gradient-to-b from-gray-400 via-gray-600 to-gray-700"
                    : "text-gray-300 hover:text-white hover:bg-white/10"
                }`}
            >
              Info Dompet
            </Button>
            <Button
              variant="ghost"
              onClick={() => setActiveTab("my-tickets")}
              className={`relative rounded-full px-6 py-2 text-sm font-subheading font-medium transition-all duration-300
                ${
                  activeTab === "my-tickets"
                    ? "text-white shadow-md bg-gradient-to-b from-gray-400 via-gray-600 to-gray-700"
                    : "text-gray-300 hover:text-white hover:bg-white/10"
                }`}
            >
              Tiketku
            </Button>
          </div>
        </div>

        {/* Tab Content */}
        <AnimatePresence mode="wait">
          {activeTab === "my-tickets" && (
            <motion.div
              key="my-tickets"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.3, ease: "easeInOut" }}
              className="space-y-6"
            >
              <div className="mb-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-2xl font-subheading font-semibold text-white">Tiketku ({myTickets.length})</h2>
                  <div className="flex items-center gap-2">
                    <Badge className="bg-green-500/20 text-green-400 border-green-500/30 font-subheading text-sm px-3 py-1">
                      {myTickets.filter((t) => t.status === "active").length} Aktif
                    </Badge>
                    <Badge className="bg-white/10 text-white border-white/20 font-subheading text-sm px-3 py-1">
                      {myTickets.filter((t) => t.status === "used").length} Terpakai
                    </Badge>
                  </div>
                </div>
              </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {myTickets.map((ticket) => (
                <Card
                  key={ticket.id}
                  onClick={() => router.push(`/tickets/${ticket.id}`)}
                  className="group overflow-hidden border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all duration-300 hover:shadow-2xl hover:shadow-white/5 cursor-pointer hover:-translate-y-1"
                >
                  {/* Event Cover Image */}
                  <div className="relative h-40 w-full overflow-hidden">
                    <Image
                      src={ticket.eventCover || "/placeholder.svg"}
                      alt={ticket.eventName}
                      fill
                      className="object-cover transition-transform duration-500 group-hover:scale-110"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent" />

                    {/* Status Badge on image */}
                    <div className="absolute top-3 right-3">
                      <Badge
                        className={`font-subheading font-semibold text-xs px-3 py-1 ${
                          ticket.status === "active"
                            ? "bg-green-500/90 text-white border-green-400/50"
                            : "bg-white/90 text-gray-900 border-white/50"
                        }`}
                      >
                        {ticket.status === "active" ? "Aktif" : "Terpakai"}
                      </Badge>
                    </div>

                    {/* Ticket icon overlay */}
                    <div className="absolute bottom-3 left-3">
                      <div className="glass-fx p-2 rounded-full">
                        <Ticket className="h-5 w-5 text-white" />
                      </div>
                    </div>
                  </div>

                  <CardContent className="p-5 space-y-3">
                    {/* Event Name */}
                    <h3 className="font-subheading font-semibold text-lg text-white leading-tight line-clamp-2 group-hover:text-gray-100 transition-colors">
                      {ticket.eventName}
                    </h3>

                    {/* Ticket Category */}
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400 font-body text-sm">Kategori</span>
                      <Badge
                        className={`font-subheading font-semibold text-xs px-3 py-1 ${
                          ticket.ticketCategory === "VIP"
                            ? "bg-purple-500/20 text-purple-300 border-purple-500/30"
                            : "bg-blue-500/20 text-blue-300 border-blue-500/30"
                        }`}
                      >
                        {ticket.ticketCategory}
                      </Badge>
                    </div>

                    {/* NFT Code */}
                    <div className="p-3 rounded-lg bg-white/5 border border-white/10">
                      <p className="text-xs text-gray-400 font-body mb-1">Kode NFT</p>
                      <p className="text-sm text-white font-mono">#{ticket.nftCode.substring(0, 13)}...</p>
                    </div>

                    {/* Purchase Date */}
                    <div className="flex items-center justify-between pt-2 border-t border-white/10">
                      <span className="text-gray-400 font-body text-xs">Dibeli</span>
                      <span className="text-white font-subheading font-medium text-sm">
                        {new Date(ticket.purchaseDate).toLocaleDateString("id-ID", {
                          day: "numeric",
                          month: "short",
                          year: "numeric",
                        })}
                      </span>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </motion.div>
        )}

        {activeTab === "wallet-info" && (
          <motion.div
            key="wallet-info"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3, ease: "easeInOut" }}
            className="space-y-8"
          >
            {/* Connected Wallets Section */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-2xl font-subheading font-semibold text-white">Dompet Terhubung</h2>
                <Button className="bg-gradient-to-b from-gray-400 via-gray-600 to-gray-700 hover:from-gray-300 hover:via-gray-500 hover:to-gray-600 text-white font-subheading font-medium">
                  <Plus className="h-4 w-4 mr-2" />
                  Tambah Dompet
                </Button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {connectedWallets.map((wallet) => (
                  <Card
                    key={wallet.id}
                    className="group border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all duration-300 hover:shadow-xl hover:shadow-white/5"
                  >
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
                            <Wallet className="h-5 w-5 text-white" />
                          </div>
                          <div>
                            <CardTitle className="text-lg font-subheading text-white">{wallet.name}</CardTitle>
                            <Badge variant="outline" className="mt-1 text-xs border-white/20 text-gray-300 font-body">
                              {wallet.type}
                            </Badge>
                          </div>
                        </div>
                        {wallet.isDefault && (
                          <Badge className="bg-green-500/20 text-green-400 border-green-500/30 text-xs font-body">
                            Utama
                          </Badge>
                        )}
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="p-3 rounded-lg bg-white/5 border border-white/10">
                        <p className="text-xs text-gray-400 font-body mb-1">Alamat</p>
                        <p className="text-sm text-white font-mono truncate">{wallet.address}</p>
                      </div>
                      <div className="flex items-end justify-between">
                        <div>
                          <p className="text-xs text-gray-400 font-body mb-1">Saldo</p>
                          <p className="text-lg font-subheading font-semibold text-white">{wallet.balance}</p>
                          <p className="text-sm text-gray-400 font-body">{wallet.balanceUSD}</p>
                        </div>
                        <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white hover:bg-white/10">
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* Transaction History Section */}
            <div>
              <h2 className="text-2xl font-subheading font-semibold text-white mb-4">Riwayat Transaksi</h2>

              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
                <CardContent className="p-0">
                  <div className="divide-y divide-white/10">
                    {transactions.map((transaction) => (
                      <div
                        key={transaction.id}
                        className="p-4 hover:bg-white/5 transition-colors duration-200 cursor-pointer"
                      >
                        <div className="flex items-center justify-between gap-4">
                          <div className="flex items-center gap-4 flex-1 min-w-0">
                            <div
                              className={`w-10 h-10 rounded-full flex items-center justify-center ${
                                transaction.type === "purchase"
                                  ? "bg-red-500/20 border border-red-500/30"
                                  : transaction.type === "deposit"
                                    ? "bg-green-500/20 border border-green-500/30"
                                    : transaction.type === "sale"
                                      ? "bg-blue-500/20 border border-blue-500/30"
                                      : "bg-yellow-500/20 border border-yellow-500/30"
                              }`}
                            >
                              {transaction.type === "purchase" || transaction.type === "withdrawal" ? (
                                <ArrowUpRight className="h-5 w-5 text-red-400" />
                              ) : (
                                <ArrowDownLeft className="h-5 w-5 text-green-400" />
                              )}
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="text-white font-subheading font-medium truncate">
                                {transaction.description}
                              </p>
                              <div className="flex items-center gap-2 mt-1">
                                <p className="text-xs text-gray-400 font-body">
                                  {transaction.date} at {transaction.time}
                                </p>
                                <span className="text-gray-600">•</span>
                                <p className="text-xs text-gray-400 font-body">{transaction.wallet}</p>
                              </div>
                            </div>
                          </div>
                          <div className="text-right">
                            <p
                              className={`text-lg font-subheading font-semibold ${
                                transaction.amount.startsWith("+") ? "text-green-400" : "text-red-400"
                              }`}
                            >
                              {transaction.amount}
                            </p>
                            <p className="text-sm text-gray-400 font-body">{transaction.amountUSD}</p>
                            <Badge
                              variant="outline"
                              className={`mt-1 text-xs font-body ${
                                transaction.status === "completed"
                                  ? "border-green-500/30 text-green-400"
                                  : "border-yellow-500/30 text-yellow-400"
                              }`}
                            >
                              {transaction.status}
                            </Badge>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </motion.div>
        )}
        </AnimatePresence>
      </div>

      {/* Custom animations */}
      <style jsx>{`
        @keyframes pulse-slow {
          0%, 100% { opacity: 0.25; }
          33% { opacity: 0.35; }
          66% { opacity: 0.45; }
        }
        @keyframes float-drift {
          0%, 100% { transform: translate(0px, 0px); opacity: 0.2; }
          25% { transform: translate(30px, -25px); opacity: 0.25; }
          50% { transform: translate(-20px, -40px); opacity: 0.3; }
          75% { transform: translate(-35px, -15px); opacity: 0.25; }
        }
        .animate-pulse-slow {
          animation: pulse-slow 12s ease-in-out infinite;
          opacity: 0.25;
        }
        .animate-float-drift {
          animation: float-drift 20s ease-in-out infinite;
          opacity: 0.2;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
        .bg-gradient-radial {
          background: radial-gradient(circle, var(--tw-gradient-stops));
        }
      `}</style>
    </div>
  )
}

export default function ProfilePage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-background pt-32 pb-12">
        <div className="container mx-auto px-4 max-w-6xl">
          <div className="mb-8">
            <h1 className="text-4xl font-heading text-white mb-2">Profil Saya</h1>
            <p className="text-gray-400 font-body">Memuat...</p>
          </div>
        </div>
      </div>
    }>
      <ProfileContent />
    </Suspense>
  )
}
::::::::::::::
app/register/page.tsx
::::::::::::::
"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { apiClient } from "@/lib/api"
import { Loader2 } from "lucide-react"

export default function RegisterPage() {
  const router = useRouter()
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    role: "USER"
  })
  const [agreeToTerms, setAgreeToTerms] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)

    if (formData.password !== formData.confirmPassword) {
      setError("Kata sandi tidak cocok!")
      return
    }

    if (!agreeToTerms) {
      setError("Harap setujui syarat dan ketentuan")
      return
    }

    if (formData.password.length < 6) {
      setError("Kata sandi harus minimal 6 karakter")
      return
    }

    setIsLoading(true)

    try {
      const response = await apiClient.register(
        formData.username,
        formData.email,
        formData.password,
        formData.role
      )

      if (response.token) {
        apiClient.setToken(response.token)
        
        if (response.user.role === 'EO') {
          router.push('/eo/dashboard')
        } else {
          router.push('/events')
        }
      }
    } catch (err: any) {
      console.error('Registration error:', err)
      setError(err.message || 'Registration failed. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-[#0a0a0a] via-[#1a0a2e] to-[#0a0a0a]">
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 -left-1/2 h-[200%] w-[200%] animate-spin-slow bg-gradient-to-r from-purple-500/10 via-transparent to-blue-500/10" />
        <div className="absolute top-1/4 right-1/4 h-96 w-96 animate-pulse rounded-full bg-purple-500/5 blur-3xl" />
        <div className="absolute bottom-1/4 left-1/4 h-96 w-96 animate-pulse rounded-full bg-blue-500/5 blur-3xl" />
      </div>

      {/* Bottom right overlay */}
      <div className="absolute bottom-0 right-0 w-3/4 h-3/4 pointer-events-none">
        <Image 
          src="/images/overlay-5.png" 
          alt="" 
          fill 
          className="object-contain object-bottom-right opacity-60"
        />
      </div>

      <div className="relative z-10 flex min-h-screen items-center justify-center px-4 py-12">
        <div className="w-full max-w-md">        
          <div className="mb-8 flex justify-center">
            <Image src="/images/app-logo.png" alt="App Logo" width={400} height={80} className="h-auto w-100" />
          </div>
          
          <div className="glass-fx p-8">
            <div className="mb-8 text-center">
              <h1 className="font-heading mb-2 text-4xl text-white">Buat Akun</h1>
              <p className="font-body text-white/60">Bergabunglah dengan kami dan mulai kumpulkan tiket</p>
            </div>

            {error && (
              <div className="mb-6 p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
                <p className="text-red-400 font-body text-sm">{error}</p>
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-5">
              <div className="space-y-2">
                <Label htmlFor="username" className="font-body text-sm font-medium text-white/90">
                  Nama Pengguna
                </Label>
                <Input
                  id="username"
                  name="username"
                  type="text"
                  placeholder="johndoe"
                  value={formData.username}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="email" className="font-body text-sm font-medium text-white/90">
                  Alamat Email
                </Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  placeholder="awak@misalan.com"
                  value={formData.email}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="role" className="font-body text-sm font-medium text-white/90">
                  Tipe Akun
                </Label>
                <select
                  id="role"
                  name="role"
                  value={formData.role}
                  onChange={handleChange}
                  disabled={isLoading}
                  className="w-full h-9 px-3 rounded-md border border-white/20 bg-white/5 text-white text-sm focus:border-purple-500/50 focus:ring-purple-500/20 focus:outline-none"
                >
                  <option value="USER" className="bg-gray-800">Pengguna Reguler</option>
                  <option value="EO" className="bg-gray-800">Event Organizer (EO)</option>
                </select>
                <p className="text-xs text-white/50 mt-1">
                  {formData.role === 'EO' 
                    ? 'Akun EO dapat membuat dan mengelola acara tetapi tidak dapat membeli tiket' 
                    : 'Pengguna reguler dapat membeli dan mengumpulkan tiket'}
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="password" className="font-body text-sm font-medium text-white/90">
                  Kata Sandi
                </Label>
                <Input
                  id="password"
                  name="password"
                  type="password"
                  placeholder="••••••••"
                  value={formData.password}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="confirmPassword" className="font-body text-sm font-medium text-white/90">
                  Konfirmasi Kata Sandi
                </Label>
                <Input
                  id="confirmPassword"
                  name="confirmPassword"
                  type="password"
                  placeholder="••••••••"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="flex items-start space-x-2">
                <Checkbox
                  id="terms"
                  checked={agreeToTerms}
                  onCheckedChange={(checked) => setAgreeToTerms(checked as boolean)}
                  disabled={isLoading}
                  className="mt-1 border-white/20 data-[state=checked]:bg-purple-500 data-[state=checked]:border-purple-500"
                />
                <Label htmlFor="terms" className="font-body text-sm text-white/70 cursor-pointer leading-relaxed">
                  Saya menyetujui{" "}
                  <Link href="#" className="text-purple-400 hover:text-purple-300 transition-colors">
                    Syarat Layanan
                  </Link>{" "}
                  dan{" "}
                  <Link href="#" className="text-purple-400 hover:text-purple-300 transition-colors">
                    Kebijakan Privasi
                  </Link>
                </Label>
              </div>

              <Button
                type="submit"
                disabled={isLoading}
                className="font-body w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 transition-all duration-300 shadow-lg shadow-purple-500/20"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Membuat akun...
                  </>
                ) : (
                  'Buat Akun'
                )}
              </Button>
            </form>

            <p className="font-body mt-6 text-center text-sm text-white/60">
              Sudah punya akun?{" "}
              <Link href="/login" className="text-purple-400 hover:text-purple-300 transition-colors">
                Masuk
              </Link>
            </p>
          </div>

          <div className="mt-4">
            <Link href="/">
              <Button
                variant="outline"
                className="border-white/20 bg-white/5 hover:bg-white/10 text-white hover:text-purple-500 font-body text-sm"
              >
                ← Kembali ke Landing Page
              </Button>
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}::::::::::::::
app/admin/dashboard/page.tsx
::::::::::::::
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  Calendar, 
  Users, 
  Ticket, 
  DollarSign, 
  CheckCircle, 
  XCircle, 
  Clock,
  TrendingUp,
  Loader2
} from "lucide-react"
import { apiClient, type Proposal, type AdminStats } from "@/lib/api"

export default function AdminDashboardPage() {
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [stats, setStats] = useState<AdminStats | null>(null)
  const [proposals, setProposals] = useState<Proposal[]>([])
  const [eos, setEos] = useState<any[]>([])
  const [processingProposal, setProcessingProposal] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    checkAdminAccess()
  }, [])

  const checkAdminAccess = async () => {
    try {
      const { user } = await apiClient.verifyToken()
      
      if (user.role !== 'ADMIN') {
        router.push('/events')
        return
      }
      
      await Promise.all([
        fetchStats(),
        fetchProposals(),
        fetchEOs()
      ])
    } catch (err: any) {
      console.error('Admin access error:', err)
      setError(err.message)
      router.push('/login')
    } finally {
      setLoading(false)
    }
  }

  const fetchStats = async () => {
    try {
      const data = await apiClient.getAdminStats()
      setStats(data)
    } catch (err: any) {
      console.error('Error fetching stats:', err)
    }
  }

  const fetchProposals = async () => {
    try {
      const data = await apiClient.getPendingProposals()
      setProposals(data)
    } catch (err: any) {
      console.error('Error fetching proposals:', err)
    }
  }

  const fetchEOs = async () => {
    try {
      const data = await apiClient.getEventOrganizers()
      setEos(data)
    } catch (err: any) {
      console.error('Error fetching EOs:', err)
    }
  }

  const handleApproveProposal = async (proposalId: string, taxWallet: string) => {
    try {
      setProcessingProposal(proposalId)
      await apiClient.approveProposal(proposalId, { 
        taxWalletAddress: taxWallet,
        adminComment: 'Approved by admin'
      })
      
      // Refresh proposals
      await fetchProposals()
      await fetchStats()
    } catch (err: any) {
      console.error('Error approving proposal:', err)
      alert(err.message || 'Failed to approve proposal')
    } finally {
      setProcessingProposal(null)
    }
  }

  const handleRejectProposal = async (proposalId: string, reason: string) => {
    try {
      setProcessingProposal(proposalId)
      await apiClient.rejectProposal(proposalId, reason || 'Rejected by admin')
      
      await fetchProposals()
      await fetchStats()
    } catch (err: any) {
      console.error('Error rejecting proposal:', err)
      alert(err.message || 'Failed to reject proposal')
    } finally {
      setProcessingProposal(null)
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    })
  }

  const formatEther = (wei: string) => {
    try {
      return (parseFloat(wei) / 1e18).toFixed(4)
    } catch {
      return '0.0000'
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-background pt-32 pb-12 flex items-center justify-center">
        <Loader2 className="h-12 w-12 text-white animate-spin" />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background pt-32 pb-12">
      <div className="container mx-auto px-4 max-w-7xl">
        <div className="mb-8">
          <h1 className="text-4xl font-heading text-white mb-2">Admin Dashboard</h1>
          <p className="text-gray-400 font-body">Manage events, proposals, and platform statistics</p>
        </div>

        {error && (
          <div className="mb-6 p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
            <p className="text-red-400 font-body text-sm">{error}</p>
          </div>
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 font-body text-sm mb-1">Total Events</p>
                  <p className="text-3xl font-heading text-white">{stats?.totalEvents || 0}</p>
                </div>
                <div className="w-12 h-12 rounded-full bg-blue-500/20 flex items-center justify-center">
                  <Calendar className="h-6 w-6 text-blue-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 font-body text-sm mb-1">Active Events</p>
                  <p className="text-3xl font-heading text-white">{stats?.activeEvents || 0}</p>
                </div>
                <div className="w-12 h-12 rounded-full bg-green-500/20 flex items-center justify-center">
                  <TrendingUp className="h-6 w-6 text-green-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 font-body text-sm mb-1">Tickets Sold</p>
                  <p className="text-3xl font-heading text-white">{stats?.totalTicketsSold || 0}</p>
                </div>
                <div className="w-12 h-12 rounded-full bg-purple-500/20 flex items-center justify-center">
                  <Ticket className="h-6 w-6 text-purple-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 font-body text-sm mb-1">Total Revenue</p>
                  <p className="text-2xl font-heading text-white">{formatEther(stats?.totalRevenue || '0')} ETH</p>
                </div>
                <div className="w-12 h-12 rounded-full bg-yellow-500/20 flex items-center justify-center">
                  <DollarSign className="h-6 w-6 text-yellow-400" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="proposals" className="space-y-6">
          <TabsList className="bg-gray-900/60 border border-white/10">
            <TabsTrigger value="proposals">
              Pending Proposals ({proposals.length})
            </TabsTrigger>
            <TabsTrigger value="eos">
              Event Organizers ({eos.length})
            </TabsTrigger>
            <TabsTrigger value="transactions">
              Recent Transactions
            </TabsTrigger>
          </TabsList>

          <TabsContent value="proposals" className="space-y-4">
            {proposals.length === 0 ? (
              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
                <CardContent className="p-12 text-center">
                  <Clock className="h-16 w-16 text-gray-600 mx-auto mb-4" />
                  <p className="text-gray-400 font-body">No pending proposals</p>
                </CardContent>
              </Card>
            ) : (
              proposals.map((proposal) => (
                <Card key={proposal.id} className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
                  <CardContent className="p-6">
                    <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-3">
                          <h3 className="text-xl font-subheading font-semibold text-white">
                            Event Proposal
                          </h3>
                          <Badge className="bg-yellow-500/20 text-yellow-400 border-yellow-500/30">
                            Pending Review
                          </Badge>
                        </div>
                        
                        <div className="space-y-2 text-sm">
                          <div className="flex items-center gap-2">
                            <span className="text-gray-400 font-body">Creator:</span>
                            <span className="text-white font-mono">{proposal.creator?.walletAddress || 'Unknown'}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="text-gray-400 font-body">Submitted:</span>
                            <span className="text-white font-subheading">{formatDate(proposal.submittedAt)}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="text-gray-400 font-body">Tax Wallet:</span>
                            <span className="text-white font-mono text-xs">{proposal.taxWalletAddress}</span>
                          </div>
                        </div>

                        {proposal.revenueBeneficiaries && proposal.revenueBeneficiaries.length > 0 && (
                          <div className="mt-4 p-3 bg-white/5 rounded-lg border border-white/10">
                            <p className="text-gray-400 font-body text-xs mb-2">Revenue Split:</p>
                            <div className="space-y-1">
                              {proposal.revenueBeneficiaries.map((beneficiary, idx) => (
                                <div key={idx} className="flex items-center justify-between text-xs">
                                  <span className="text-gray-300 font-mono">{beneficiary.address.substring(0, 10)}...</span>
                                  <span className="text-white font-subheading font-semibold">{(beneficiary.percentage / 100).toFixed(2)}%</span>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>

                      <div className="flex flex-col gap-2">
                        <Button
                          onClick={() => handleApproveProposal(proposal.id, proposal.taxWalletAddress)}
                          disabled={processingProposal === proposal.id}
                          className="bg-green-600 hover:bg-green-700 text-white font-subheading font-semibold"
                        >
                          {processingProposal === proposal.id ? (
                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          ) : (
                            <CheckCircle className="h-4 w-4 mr-2" />
                          )}
                          Approve
                        </Button>
                        <Button
                          onClick={() => {
                            const reason = prompt('Enter rejection reason:')
                            if (reason) handleRejectProposal(proposal.id, reason)
                          }}
                          disabled={processingProposal === proposal.id}
                          variant="outline"
                          className="border-red-500/30 text-red-400 hover:bg-red-500/20 font-subheading font-semibold"
                        >
                          <XCircle className="h-4 w-4 mr-2" />
                          Reject
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))
            )}
          </TabsContent>

          <TabsContent value="eos" className="space-y-4">
            {eos.length === 0 ? (
              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
                <CardContent className="p-12 text-center">
                  <Users className="h-16 w-16 text-gray-600 mx-auto mb-4" />
                  <p className="text-gray-400 font-body">No event organizers registered</p>
                </CardContent>
              </Card>
            ) : (
              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
                <CardContent className="p-0">
                  <div className="divide-y divide-white/10">
                    {eos.map((eo) => (
                      <div key={eo.id} className="p-6 hover:bg-white/5 transition-colors">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-white font-subheading font-semibold mb-1">
                              {eo.name || 'Unnamed EO'}
                            </p>
                            <p className="text-gray-400 font-mono text-sm mb-2">{eo.walletAddress}</p>
                            <div className="flex items-center gap-4 text-xs text-gray-400">
                              <span>Joined: {formatDate(eo.createdAt)}</span>
                              <span>Events: {eo._count?.events || 0}</span>
                            </div>
                          </div>
                          <Badge className="bg-blue-500/20 text-blue-400 border-blue-500/30">
                            Event Organizer
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="transactions" className="space-y-4">
            <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
              <CardHeader>
                <CardTitle className="text-white font-subheading">Recent Transactions</CardTitle>
              </CardHeader>
              <CardContent>
                {!stats?.recentTransactions || stats.recentTransactions.length === 0 ? (
                  <div className="text-center py-8">
                    <p className="text-gray-400 font-body">No recent transactions</p>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {stats.recentTransactions.map((tx) => (
                      <div key={tx.txHash} className="p-4 rounded-lg bg-white/5 border border-white/10">
                        <div className="flex items-center justify-between mb-2">
                          <Badge className="bg-purple-500/20 text-purple-400 border-purple-500/30 text-xs">
                            {tx.type}
                          </Badge>
                          <span className="text-white font-heading text-sm">{formatEther(tx.amount)} ETH</span>
                        </div>
                        <div className="flex items-center justify-between text-xs">
                          <span className="text-gray-400 font-mono truncate mr-2">{tx.txHash.substring(0, 20)}...</span>
                          <span className="text-gray-500">{formatDate(tx.timestamp)}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}::::::::::::::
app/eo/create-event/page.tsx
::::::::::::::
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Plus, Trash2, Loader2, ArrowLeft, Upload, Calendar as CalendarIcon, Clock, X, CheckCircle, AlertCircle, AlertTriangle } from "lucide-react"
import { apiClient } from "@/lib/api"
import { blockchainService } from "@/lib/blockchain"
import Image from "next/image"

interface RevenueBeneficiary {
  address: string
  name: string
  percentage: number
}

type AlertType = 'success' | 'error' | 'warning' | 'info'

interface Alert {
  id: string
  type: AlertType
  title: string
  message: string
}

const convertPercentageToBasisPoints = (percentage: number): number => {
  return Math.round(percentage * 100)
}

const validateTotalPercentage = (percentages: number[]): boolean => {
  const total = percentages.reduce((sum, p) => sum + p, 0)
  return Math.abs(total - 100) < 0.01
}

const uploadToPinata = async (file: File): Promise<string> => {
  const PINATA_JWT = process.env.NEXT_PUBLIC_PINATA_JWT

  if (!PINATA_JWT) {
    throw new Error('Pinata JWT not configured')
  }

  const formData = new FormData()
  formData.append('file', file)

  const metadata = JSON.stringify({
    name: file.name,
    keyvalues: {
      type: 'event-poster',
      uploadedAt: new Date().toISOString()
    }
  })
  formData.append('pinataMetadata', metadata)

  const options = JSON.stringify({
    cidVersion: 1,
  })
  formData.append('pinataOptions', options)

  const response = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${PINATA_JWT}`,
    },
    body: formData,
  })

  if (!response.ok) {
    throw new Error('Failed to upload to IPFS')
  }

  const data = await response.json()
  return `https://bronze-cheerful-barracuda-21.mypinata.cloud/ipfs/${data.IpfsHash}`
}

export default function CreateEventPage() {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [uploadingPoster, setUploadingPoster] = useState(false)
  const [walletAddress, setWalletAddress] = useState<string>("")
  const [posterFile, setPosterFile] = useState<File | null>(null)
  const [posterPreview, setPosterPreview] = useState<string>("")
  const [alerts, setAlerts] = useState<Alert[]>([])
  
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    location: "",
    eventDate: "",
    eventTime: "",
    posterUrl: "",
    taxWalletAddress: ""
  })
  
  const [beneficiaries, setBeneficiaries] = useState<RevenueBeneficiary[]>([
    { address: "", name: "", percentage: 0 }
  ])

  useEffect(() => {
    checkEOAccess()
  }, [])

  const showAlert = (type: AlertType, title: string, message: string) => {
    const id = Date.now().toString()
    setAlerts(prev => [...prev, { id, type, title, message }])
    setTimeout(() => {
      setAlerts(prev => prev.filter(alert => alert.id !== id))
    }, 5000)
  }

  const removeAlert = (id: string) => {
    setAlerts(prev => prev.filter(alert => alert.id !== id))
  }

  const getAlertIcon = (type: AlertType) => {
    switch (type) {
      case 'success': return CheckCircle
      case 'error': return AlertCircle
      case 'warning': return AlertTriangle
      default: return AlertCircle
    }
  }

  const getAlertStyles = (type: AlertType) => {
    switch (type) {
      case 'success': return 'bg-green-50 border-green-200 text-green-900'
      case 'error': return 'bg-red-50 border-red-200 text-red-900'
      case 'warning': return 'bg-yellow-50 border-yellow-200 text-yellow-900'
      default: return 'bg-blue-50 border-blue-200 text-blue-900'
    }
  }

  const checkEOAccess = async () => {
    try {
      const { user } = await apiClient.verifyToken()
      
      if (user.role !== 'EO' && user.role !== 'ADMIN') {
        router.push('/events')
        return
      }

      const address = await blockchainService.getCurrentAccount()
      if (!address) {
        router.push('/login')
        return
      }

      setWalletAddress(address)
      setFormData(prev => ({
        ...prev,
        taxWalletAddress: address
      }))
    } catch (err) {
      console.error('EO access error:', err)
      router.push('/login')
    }
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    })
  }

  const handlePosterChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    if (!file.type.startsWith('image/')) {
      showAlert('error', 'Invalid File', 'Please upload an image file')
      return
    }

    if (file.size > 5 * 1024 * 1024) {
      showAlert('error', 'File Too Large', 'Image must be less than 5MB')
      return
    }

    setPosterFile(file)
    
    const reader = new FileReader()
    reader.onloadend = () => {
      setPosterPreview(reader.result as string)
    }
    reader.readAsDataURL(file)

    setUploadingPoster(true)
    try {
      const ipfsUrl = await uploadToPinata(file)
      setFormData(prev => ({ ...prev, posterUrl: ipfsUrl }))
      showAlert('success', 'Upload Successful', 'Image uploaded successfully')
    } catch (error) {
      showAlert('error', 'Upload Failed', 'Failed to upload image. Please try again.')
      setPosterFile(null)
      setPosterPreview('')
    } finally {
      setUploadingPoster(false)
    }
  }

  const handleBeneficiaryChange = (index: number, field: keyof RevenueBeneficiary, value: string | number) => {
    const updated = [...beneficiaries]
    updated[index] = {
      ...updated[index],
      [field]: value
    }
    setBeneficiaries(updated)
  }

  const addBeneficiary = () => {
    setBeneficiaries([
      ...beneficiaries,
      { address: "", name: "", percentage: 0 }
    ])
  }

  const removeBeneficiary = (index: number) => {
    if (beneficiaries.length > 1) {
      setBeneficiaries(beneficiaries.filter((_, i) => i !== index))
    } else {
      showAlert('warning', 'Cannot Remove', 'At least one beneficiary is required')
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      setLoading(true)

      if (!formData.eventDate || !formData.eventTime) {
        showAlert('error', 'Missing Fields', 'Please select event date and time')
        return
      }

      if (!formData.posterUrl) {
        showAlert('error', 'Missing Image', 'Please upload an event poster')
        return
      }

      const hasEmptyBeneficiary = beneficiaries.some(b => !b.address)
      if (hasEmptyBeneficiary) {
        showAlert('error', 'Invalid Beneficiaries', 'Please fill in all beneficiary wallet addresses')
        return
      }

      const percentages = beneficiaries.map(b => Number(b.percentage))
      if (!validateTotalPercentage(percentages)) {
        const total = percentages.reduce((sum, p) => sum + p, 0)
        showAlert('warning', 'Invalid Percentages', `Total percentage must equal 100%. Current total: ${total.toFixed(2)}%`)
        return
      }

      const basisPoints = percentages.map(p => convertPercentageToBasisPoints(p))

      const beneficiariesWithBasisPoints = beneficiaries.map((b, index) => ({
        address: b.address,
        name: b.name,
        percentage: basisPoints[index]
      }))

      const eventDateTime = new Date(`${formData.eventDate}T${formData.eventTime}`)

      const response = await apiClient.createEvent({
        name: formData.name,
        description: formData.description,
        location: formData.location,
        date: eventDateTime.toISOString(),
        posterUrl: formData.posterUrl,
        creatorAddress: walletAddress,
        revenueBeneficiaries: beneficiariesWithBasisPoints,
        taxWalletAddress: formData.taxWalletAddress
      })

      showAlert('success', 'Event Created', 'Your event has been submitted for approval')
      
      setTimeout(() => {
        router.push('/eo/dashboard')
      }, 2000)
    } catch (err: any) {
      console.error('Error creating event:', err)
      showAlert('error', 'Submission Failed', err.message || 'Failed to create event')
    } finally {
      setLoading(false)
    }
  }

  const totalPercentage = beneficiaries.reduce((sum, b) => sum + Number(b.percentage), 0)

  return (
    <div className="min-h-screen bg-background pt-32 pb-12">
      <div className="fixed top-4 right-4 z-50 space-y-3 max-w-md">
        {alerts.map(alert => {
          const IconComponent = getAlertIcon(alert.type)
          const styles = getAlertStyles(alert.type)
          
          return (
            <div
              key={alert.id}
              className={`${styles} border rounded-lg shadow-lg p-4 flex items-start gap-3 animate-slide-in`}
              style={{
                animation: 'slideIn 0.3s ease-out'
              }}
            >
              <IconComponent className="w-5 h-5 mt-0.5 flex-shrink-0" />
              <div className="flex-1 min-w-0">
                <h4 className="font-semibold text-sm mb-1">{alert.title}</h4>
                <p className="text-sm opacity-90">{alert.message}</p>
              </div>
              <button
                onClick={() => removeAlert(alert.id)}
                className="text-gray-400 hover:text-gray-600 transition-colors flex-shrink-0"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          )
        })}
      </div>

      <style jsx>{`
        @keyframes slideIn {
          from {
            transform: translateX(100%);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }
      `}</style>

      <div className="container mx-auto px-4 max-w-4xl">
        <Button
          variant="ghost"
          onClick={() => router.push('/eo/dashboard')}
          className="mb-6 text-gray-400 hover:text-white hover:bg-white/10"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Dashboard
        </Button>

        <div className="mb-8">
          <h1 className="text-4xl font-heading text-white mb-2">Create New Event</h1>
          <p className="text-gray-400 font-body">Fill in the details to submit your event for approval</p>
        </div>

        <form onSubmit={handleSubmit}>
          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md mb-6">
            <CardContent className="p-6 space-y-6">
              <h2 className="text-xl font-subheading font-semibold text-white">Event Information</h2>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="name" className="text-white font-subheading mb-2 block">
                    Event Name <span className="text-red-400">*</span>
                  </Label>
                  <Input
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    required
                    placeholder="Enter event name"
                    className="bg-white/5 border-white/20 text-white placeholder:text-gray-500"
                  />
                </div>

                <div>
                  <Label htmlFor="description" className="text-white font-subheading mb-2 block">
                    Description <span className="text-red-400">*</span>
                  </Label>
                  <Textarea
                    id="description"
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    required
                    rows={4}
                    placeholder="Describe your event"
                    className="bg-white/5 border-white/20 text-white placeholder:text-gray-500"
                  />
                </div>

                <div>
                  <Label htmlFor="location" className="text-white font-subheading mb-2 block">
                    Location <span className="text-red-400">*</span>
                  </Label>
                  <Input
                    id="location"
                    name="location"
                    value={formData.location}
                    onChange={handleInputChange}
                    required
                    placeholder="Event location"
                    className="bg-white/5 border-white/20 text-white placeholder:text-gray-500"
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="eventDate" className="text-white font-subheading mb-2 block">
                      Event Date <span className="text-red-400">*</span>
                    </Label>
                    <div className="relative">
                      <CalendarIcon className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none" />
                      <Input
                        id="eventDate"
                        name="eventDate"
                        type="date"
                        value={formData.eventDate}
                        onChange={handleInputChange}
                        required
                        min={new Date().toISOString().split('T')[0]}
                        className="pl-10 bg-white/5 border-white/20 text-white [&::-webkit-calendar-picker-indicator]:invert [&::-webkit-calendar-picker-indicator]:brightness-50"
                      />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="eventTime" className="text-white font-subheading mb-2 block">
                      Event Time <span className="text-red-400">*</span>
                    </Label>
                    <div className="relative">
                      <Clock className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none" />
                      <Input
                        id="eventTime"
                        name="eventTime"
                        type="time"
                        value={formData.eventTime}
                        onChange={handleInputChange}
                        required
                        className="pl-10 bg-white/5 border-white/20 text-white [&::-webkit-calendar-picker-indicator]:invert [&::-webkit-calendar-picker-indicator]:brightness-50"
                      />
                    </div>
                  </div>
                </div>

                <div>
                  <Label htmlFor="posterFile" className="text-white font-subheading mb-2 block">
                    Event Poster <span className="text-red-400">*</span>
                  </Label>
                  <div className="space-y-3">
                    <div className="flex items-center gap-3">
                      <label htmlFor="posterFile" className="flex-1 cursor-pointer">
                        <div className="flex items-center gap-3 p-4 rounded-lg bg-white/5 border-2 border-dashed border-white/20 hover:border-white/40 transition-colors">
                          <Upload className="h-5 w-5 text-gray-400" />
                          <div className="flex-1">
                            <p className="text-sm text-white font-medium">
                              {posterFile ? posterFile.name : 'Click to upload poster'}
                            </p>
                            <p className="text-xs text-gray-500 mt-1">
                              PNG, JPG up to 5MB
                            </p>
                          </div>
                          {uploadingPoster && (
                            <Loader2 className="h-5 w-5 text-blue-400 animate-spin" />
                          )}
                        </div>
                        <input
                          id="posterFile"
                          type="file"
                          accept="image/*"
                          onChange={handlePosterChange}
                          className="hidden"
                          disabled={uploadingPoster}
                        />
                      </label>
                    </div>
                    
                    {posterPreview && (
                      <div className="relative w-full h-48 rounded-lg overflow-hidden border border-white/10">
                        <Image
                          src={posterPreview}
                          alt="Poster preview"
                          fill
                          className="object-cover"
                        />
                      </div>
                    )}

                    {formData.posterUrl && (
                      <p className="text-xs text-green-400">
                        ✓ Uploaded to IPFS: {formData.posterUrl.substring(0, 50)}...
                      </p>
                    )}
                  </div>
                </div>

                <div>
                  <Label htmlFor="taxWalletAddress" className="text-white font-subheading mb-2 block">
                    Tax Wallet Address <span className="text-red-400">*</span>
                  </Label>
                  <Input
                    id="taxWalletAddress"
                    name="taxWalletAddress"
                    value={formData.taxWalletAddress}
                    onChange={handleInputChange}
                    required
                    placeholder="0x..."
                    className="bg-white/5 border-white/20 text-white placeholder:text-gray-500 font-mono"
                  />
                  <p className="text-xs text-gray-500 mt-1">10% of revenue will go to this address</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md mb-6">
            <CardContent className="p-6 space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-xl font-subheading font-semibold text-white">Revenue Distribution</h2>
                  <p className="text-sm text-gray-400 mt-1">Total must equal 100%</p>
                </div>
                <Button
                  type="button"
                  onClick={addBeneficiary}
                  variant="outline"
                  size="sm"
                  className="border-white/20 text-white hover:bg-white/10"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Beneficiary
                </Button>
              </div>

              <div className="space-y-4">
                {beneficiaries.map((beneficiary, index) => (
                  <div key={index} className="p-4 rounded-lg bg-white/5 border border-white/10">
                    <div className="flex items-start justify-between gap-4 mb-4">
                      <h3 className="text-white font-subheading font-semibold">Beneficiary #{index + 1}</h3>
                      {beneficiaries.length > 1 && (
                        <Button
                          type="button"
                          onClick={() => removeBeneficiary(index)}
                          variant="ghost"
                          size="sm"
                          className="text-red-400 hover:bg-red-500/20"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="md:col-span-2">
                        <Label className="text-white font-body text-sm mb-2 block">
                          Wallet Address <span className="text-red-400">*</span>
                        </Label>
                        <Input
                          value={beneficiary.address}
                          onChange={(e) => handleBeneficiaryChange(index, 'address', e.target.value)}
                          required
                          placeholder="0x..."
                          className="bg-white/5 border-white/20 text-white placeholder:text-gray-500 font-mono text-sm"
                        />
                      </div>

                      <div>
                        <Label className="text-white font-body text-sm mb-2 block">
                          Percentage (%) <span className="text-red-400">*</span>
                        </Label>
                        <Input
                          type="number"
                          value={beneficiary.percentage || ''}
                          onChange={(e) => handleBeneficiaryChange(index, 'percentage', Number(e.target.value))}
                          required
                          min="0"
                          max="100"
                          step="0.01"
                          placeholder="0-100"
                          className="bg-white/5 border-white/20 text-white placeholder:text-gray-500"
                        />
                        <p className="text-xs text-gray-500 mt-1">
                          Will convert to {convertPercentageToBasisPoints(beneficiary.percentage)} BP
                        </p>
                      </div>

                      <div className="md:col-span-3">
                        <Label className="text-white font-body text-sm mb-2 block">
                          Name (Optional)
                        </Label>
                        <Input
                          value={beneficiary.name}
                          onChange={(e) => handleBeneficiaryChange(index, 'name', e.target.value)}
                          placeholder="Beneficiary name"
                          className="bg-white/5 border-white/20 text-white placeholder:text-gray-500"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              <div className="p-4 rounded-lg bg-blue-500/10 border border-blue-500/30">
                <div className="flex items-center justify-between">
                  <span className="text-blue-400 font-subheading font-semibold">Total Percentage:</span>
                  <span className={`text-lg font-heading ${
                    totalPercentage === 100 ? 'text-green-400' : 'text-red-400'
                  }`}>
                    {totalPercentage.toFixed(2)}%
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-4">
            <Button
              type="button"
              onClick={() => router.push('/eo/dashboard')}
              variant="outline"
              className="flex-1 border-white/20 text-white hover:bg-white/10"
              disabled={loading || uploadingPoster}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={loading || uploadingPoster}
              className="flex-1 bg-gradient-to-b from-blue-500 via-blue-600 to-blue-700 hover:from-blue-400 hover:to-blue-600 text-white font-subheading font-semibold"
            >
              {loading ? (
                <>
                  <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                  Creating...
                </>
              ) : (
                'Create Event'
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  )
}::::::::::::::
app/eo/dashboard/page.tsx
::::::::::::::
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import Image from "next/image"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { 
  Calendar, 
  Ticket, 
  DollarSign, 
  TrendingUp,
  Plus,
  Loader2,
  Eye,
  Settings
} from "lucide-react"
import { apiClient, type Event } from "@/lib/api"
import { blockchainService } from "@/lib/blockchain"

export default function EODashboardPage() {
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [walletAddress, setWalletAddress] = useState<string | null>(null)
  const [stats, setStats] = useState<any>(null)
  const [events, setEvents] = useState<Event[]>([])
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    checkEOAccess()
  }, [])

  const checkEOAccess = async () => {
    try {
      const { user } = await apiClient.verifyToken()
      
      if (user.role !== 'EO' && user.role !== 'ADMIN') {
        router.push('/events')
        return
      }

      const address = await blockchainService.getCurrentAccount()
      if (!address) {
        router.push('/login')
        return
      }

      setWalletAddress(address)
      await Promise.all([
        fetchDashboardStats(address),
        fetchEOEvents(address)
      ])
    } catch (err: any) {
      console.error('EO access error:', err)
      setError(err.message)
      router.push('/login')
    } finally {
      setLoading(false)
    }
  }

  const getTotalTicketsSold = (event: Event): number => {
    return event.ticketTypes?.reduce((total, type) => total + type.sold, 0) || 0;
    }

  const fetchDashboardStats = async (address: string) => {
    try {
      const data = await apiClient.getDashboardStats(address)
      setStats(data)
    } catch (err: any) {
      console.error('Error fetching stats:', err)
    }
  }

  const fetchEOEvents = async (address: string) => {
    try {
      const data = await apiClient.getEOEvents(address)
      setEvents(data)
    } catch (err: any) {
      console.error('Error fetching events:', err)
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    })
  }

  const formatEther = (wei: string) => {
    try {
      return (parseFloat(wei) / 1e18).toFixed(4)
    } catch {
      return '0.0000'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'APPROVED':
      case 'ACTIVE':
        return 'bg-green-500/20 text-green-400 border-green-500/30'
      case 'PENDING':
        return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'
      case 'ENDED':
        return 'bg-gray-500/20 text-gray-400 border-gray-500/30'
      case 'CANCELLED':
        return 'bg-red-500/20 text-red-400 border-red-500/30'
      default:
        return 'bg-blue-500/20 text-blue-400 border-blue-500/30'
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-background pt-32 pb-12 flex items-center justify-center">
        <Loader2 className="h-12 w-12 text-white animate-spin" />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background pt-32 pb-12">
      <div className="container mx-auto px-4 max-w-7xl">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-heading text-white mb-2">EO Dashboard</h1>
            <p className="text-gray-400 font-body">Manage your events and track performance</p>
          </div>
          <Button
            onClick={() => router.push('/eo/create-event')}
            className="bg-gradient-to-b from-blue-500 via-blue-600 to-blue-700 hover:from-blue-400 hover:to-blue-600 text-white font-subheading font-semibold"
          >
            <Plus className="h-5 w-5 mr-2" />
            Create Event
          </Button>
        </div>

        {error && (
          <div className="mb-6 p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
            <p className="text-red-400 font-body text-sm">{error}</p>
          </div>
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 font-body text-sm mb-1">Total Events</p>
                  <p className="text-3xl font-heading text-white">{stats?.totalEvents || 0}</p>
                </div>
                <div className="w-12 h-12 rounded-full bg-blue-500/20 flex items-center justify-center">
                  <Calendar className="h-6 w-6 text-blue-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 font-body text-sm mb-1">Active Events</p>
                  <p className="text-3xl font-heading text-white">{stats?.activeEvents || 0}</p>
                </div>
                <div className="w-12 h-12 rounded-full bg-green-500/20 flex items-center justify-center">
                  <TrendingUp className="h-6 w-6 text-green-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 font-body text-sm mb-1">Tickets Sold</p>
                  <p className="text-3xl font-heading text-white">{stats?.totalTicketsSold || 0}</p>
                </div>
                <div className="w-12 h-12 rounded-full bg-purple-500/20 flex items-center justify-center">
                  <Ticket className="h-6 w-6 text-purple-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 font-body text-sm mb-1">Total Revenue</p>
                  <p className="text-2xl font-heading text-white">{formatEther(stats?.totalRevenue || '0')} ETH</p>
                </div>
                <div className="w-12 h-12 rounded-full bg-yellow-500/20 flex items-center justify-center">
                  <DollarSign className="h-6 w-6 text-yellow-400" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="mb-6">
          <h2 className="text-2xl font-subheading font-semibold text-white mb-4">Your Events</h2>
        </div>

        {events.length === 0 ? (
          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
            <CardContent className="p-12 text-center">
              <Calendar className="h-16 w-16 text-gray-600 mx-auto mb-4" />
              <p className="text-gray-400 font-body mb-4">You haven't created any events yet</p>
              <Button
                onClick={() => router.push('/eo/create-event')}
                className="bg-gradient-to-b from-blue-500 via-blue-600 to-blue-700 hover:from-blue-400 hover:to-blue-600"
              >
                <Plus className="h-5 w-5 mr-2" />
                Create Your First Event
              </Button>
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {events.map((event) => (
              <Card key={event.id} className="group overflow-hidden border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all duration-300">
                <div className="relative h-40 w-full overflow-hidden">
                  <Image
                    src={event.posterUrl || "/placeholder.svg"}
                    alt={event.name}
                    fill
                    className="object-cover transition-transform duration-500 group-hover:scale-110"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent" />
                  
                  <div className="absolute top-3 right-3">
                    <Badge className={`font-subheading font-semibold text-xs px-3 py-1 ${getStatusColor(event.status)}`}>
                      {event.status}
                    </Badge>
                  </div>
                </div>

                <CardContent className="p-5 space-y-3">
                  <h3 className="font-subheading font-semibold text-lg text-white leading-tight line-clamp-2">
                    {event.name}
                  </h3>

                  <div className="space-y-2 text-sm">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400 font-body">Date</span>
                      <span className="text-white font-subheading">{formatDate(event.date)}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400 font-body">Tickets Sold</span>
                      <span className="text-white font-subheading font-semibold">
                        {getTotalTicketsSold(event)}
                      </span>
                    </div>
                  </div>

                  <div className="flex gap-2 pt-3 border-t border-white/10">
                    <Button
                      onClick={() => router.push(`/eo/events/${event.id}`)}
                      variant="outline"
                      size="sm"
                      className="flex-1 border-white/20 text-white hover:bg-white/10"
                    >
                      <Eye className="h-4 w-4 mr-2" />
                      View
                    </Button>
                    <Button
                      onClick={() => router.push(`/eo/events/${event.id}/settings`)}
                      variant="outline"
                      size="sm"
                      className="flex-1 border-white/20 text-white hover:bg-white/10"
                    >
                      <Settings className="h-4 w-4 mr-2" />
                      Manage
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}::::::::::::::
app/events/[id]/page.tsx
::::::::::::::
"use client"

import { useState, use } from "react"
import Image from "next/image"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { useRouter } from "next/navigation"
import {
  MapPin,
  Calendar,
  Clock,
  Users,
  ArrowLeft,
  Ticket,
  ChevronLeft,
  ChevronRight,
  Eye,
  Heart,
  Share2,
} from "lucide-react"
import { allEvents } from "@/lib/events-data"

interface EventDataType {
  id: number
  name: string
  logo: string
  banner: string
  category: string
  featuring: string[]
  location: string
  address: string
  date: string
  time: string
  capacity: string
  regularTickets: number
  regularTicketsSold: number
  vipTickets: number
  vipTicketsSold: number
  description: string
  ticketPrice: string
  organizer: string
  soldOut: boolean
}

// Generate enhanced event data from allEvents
const generateEventDetails = (): Record<string, EventDataType> => {
  const addresses = [
    "Jl. Pintu Satu Senayan, Jakarta Pusat, DKI Jakarta",
    "Jl. Pluit Selatan Raya, Jakarta Utara, DKI Jakarta",
    "BSD Green Office Park, Tangerang, Banten",
    "Jl. Pintu Satu Senayan, Jakarta Pusat, DKI Jakarta",
    "Kawasan ITDC, Nusa Dua, Bali",
    "Jl. Gatot Subroto No.289, Bandung, Jawa Barat",
    "Jl. Basuki Rahmat No.8-12, Surabaya, Jawa Timur",
    "Jl. Casablanca Kav.88, Jakarta Selatan, DKI Jakarta",
    "Jl. AM Sangaji, Yogyakarta, DIY",
    "Jl. Lodan Timur No.7, Jakarta Utara, DKI Jakarta",
  ]

  const times = [
    "18:00 - 23:00 WIB",
    "19:00 - 00:00 WIB",
    "17:00 - 22:00 WIB",
    "20:00 - 01:00 WIB",
    "16:00 - 22:00 WITA",
    "18:30 - 23:30 WIB",
    "19:00 - 00:00 WIB",
    "17:30 - 22:30 WIB",
    "18:00 - 23:00 WIB",
    "19:30 - 00:30 WIB",
  ]

  const capacities = [
    "5.000 peserta",
    "4.500 peserta",
    "3.500 peserta",
    "6.000 peserta",
    "4.000 peserta",
    "3.000 peserta",
    "5.500 peserta",
    "2.500 peserta",
    "4.200 peserta",
    "4.800 peserta",
  ]

  const organizers = [
    "Wave Entertainment",
    "Live Nation Indonesia",
    "Ismaya Live",
    "Java Musikindo",
    "Island Vibes Productions",
    "Rajawali Indonesia",
    "Concert Pro Indonesia",
    "Urban Motion",
    "Jogja Live",
    "Coastline Events",
  ]

  const ticketConfigs = [
    { regular: 4000, regularSold: 3200, vip: 1000, vipSold: 850 },
    { regular: 3500, regularSold: 3500, vip: 1000, vipSold: 1000 },
    { regular: 2800, regularSold: 1400, vip: 700, vipSold: 350 },
    { regular: 4800, regularSold: 3840, vip: 1200, vipSold: 1080 },
    { regular: 3200, regularSold: 2240, vip: 800, vipSold: 560 },
    { regular: 2400, regularSold: 1200, vip: 600, vipSold: 300 },
    { regular: 4400, regularSold: 2640, vip: 1100, vipSold: 660 },
    { regular: 2000, regularSold: 1000, vip: 500, vipSold: 250 },
    { regular: 3360, regularSold: 1680, vip: 840, vipSold: 420 },
    { regular: 3840, regularSold: 1920, vip: 960, vipSold: 480 },
  ]

  const eventData: Record<string, EventDataType> = {}

  allEvents.forEach((event, index) => {
    eventData[event.id.toString()] = {
      ...event,
      address: addresses[index],
      time: times[index],
      capacity: capacities[index],
      regularTickets: ticketConfigs[index].regular,
      regularTicketsSold: ticketConfigs[index].regularSold,
      vipTickets: ticketConfigs[index].vip,
      vipTicketsSold: ticketConfigs[index].vipSold,
      description: `Rasakan pengalaman festival musik terbaik yang menampilkan ${event.featuring.slice(0, 3).join(", ")} dan banyak lagi! ${event.name} menghadirkan musik Indonesia terbaik dalam malam pertunjukan, cahaya, dan energi yang tak terlupakan. Bergabunglah dengan ribuan pencinta musik untuk acara spektakuler ini.`,
      ticketPrice: "Mulai dari 0.0055 ETH",
      organizer: organizers[index],
      soldOut: false,
    }
  })

  return eventData
}

const eventData = generateEventDetails()

const resaleTickets = [
  { id: 1, seller: "John D.", type: "Regular", price: 385000, originalPrice: 350000 },
  { id: 2, seller: "Sarah M.", type: "VIP", price: 825000, originalPrice: 750000 },
  { id: 3, seller: "Mike R.", type: "Regular", price: 370000, originalPrice: 350000 },
  { id: 4, seller: "Lisa K.", type: "VIP", price: 900000, originalPrice: 750000 },
  { id: 5, seller: "David P.", type: "Regular", price: 400000, originalPrice: 350000 },
  { id: 6, seller: "Emma W.", type: "Regular", price: 365000, originalPrice: 350000 },
  { id: 7, seller: "Chris B.", type: "VIP", price: 850000, originalPrice: 750000 },
  { id: 8, seller: "Anna L.", type: "Regular", price: 390000, originalPrice: 350000 },
  { id: 9, seller: "Tom H.", type: "Regular", price: 375000, originalPrice: 350000 },
  { id: 10, seller: "Rachel S.", type: "VIP", price: 880000, originalPrice: 750000 },
  { id: 11, seller: "Kevin J.", type: "Regular", price: 395000, originalPrice: 350000 },
  { id: 12, seller: "Sophie T.", type: "Regular", price: 360000, originalPrice: 350000 },
  { id: 13, seller: "Mark W.", type: "VIP", price: 920000, originalPrice: 750000 },
  { id: 14, seller: "Julia F.", type: "Regular", price: 380000, originalPrice: 350000 },
  { id: 15, seller: "Alex C.", type: "Regular", price: 405000, originalPrice: 350000 },
]

export default function EventDetailPage({ params }: { params: Promise<{ id: string }> }) {
  const { id } = use(params)
  const router = useRouter()
  const event = eventData[id] || eventData["1"]
  const [marketPage, setMarketPage] = useState(0)
  const [isFavorite, setIsFavorite] = useState(false)

  const TICKETS_PER_PAGE = 9
  const totalPages = Math.ceil(resaleTickets.length / TICKETS_PER_PAGE)
  const currentTickets = resaleTickets.slice(marketPage * TICKETS_PER_PAGE, (marketPage + 1) * TICKETS_PER_PAGE)

  // sold out state will be derived from ticket counts below

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: event.name,
          text: `Check out ${event.name} - ${event.featuring.join(", ")}`,
          url: window.location.href,
        })
      } catch (error) {
        console.log("Error sharing:", error)
      }
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(window.location.href)
      alert("Link copied to clipboard!")
    }
  }

  const regularTicketsRemaining = event.regularTickets - event.regularTicketsSold
  const vipTicketsRemaining = event.vipTickets - event.vipTicketsSold
  const totalTickets = event.regularTickets + event.vipTickets
  const totalTicketsSold = event.regularTicketsSold + event.vipTicketsSold
  const ticketsSoldPercentage = ((totalTicketsSold / totalTickets) * 100).toFixed(1)
  // Determine sold-out mode from ticket configuration (both tiers sold)
  const isSoldOut = (regularTicketsRemaining <= 0 && vipTicketsRemaining <= 0) || event.soldOut

  const handleCheckout = () => {
    router.push(`/events/${id}/checkout`)
  }

  return (
    <div className="min-h-screen bg-background">
      {/* sold-out mode is derived from ticket config; dev toggle removed */}

      {/* Hero Section with Banner */}
      <div className="relative h-[370px] m-4 sm:m-6 md:m-8 mt-0 mb-0 overflow-visible rounded-b-2xl bg-black">
        <div className="absolute inset-0 overflow-hidden rounded-b-2xl">
          <Image src={event.banner || "/placeholder.svg"} alt="Event banner" fill className="object-cover" />
        </div>
        <div className="absolute inset-0 bg-gradient-to-b from-black/40 via-black/30 via-60% to-black/80 rounded-b-2xl" />

        <div className="absolute inset-0 flex items-end justify-start">
          <div className="text-white px-4 sm:px-6 md:px-12 pb-6 sm:pb-8 md:pb-12 flex flex-col sm:flex-row items-start gap-4 sm:gap-6">
            <Link href="/events">
              <button className="glass-fx p-2 sm:p-3 rounded-full hover:bg-white/30 transition-all z-10" aria-label="Back">
                <ArrowLeft className="h-5 w-5 sm:h-6 sm:w-6 text-white" />
              </button>
            </Link>

            {/* Event Logo */}
            <div className="relative h-24 w-24 sm:h-32 sm:w-32 md:h-40 md:w-40 rounded-xl overflow-hidden shadow-2xl border-2 sm:border-4 border-white/20">
              <Image src={event.logo || "/placeholder.svg"} alt={event.name} fill className="object-cover" />
            </div>

            {/* Event Info */}
            <div className="flex-1 pb-2 w-full sm:w-auto">
              <div className="mb-2 sm:mb-3 flex items-center gap-2 sm:gap-3 flex-wrap">
                <Badge className="glass-fx text-white font-subheading font-semibold text-xs sm:text-sm px-3 sm:px-4 py-1 sm:py-1.5">
                  {event.category}
                </Badge>
                <button
                  onClick={handleShare}
                  className="glass-fx p-1.5 sm:p-2 rounded-full hover:bg-white/30 transition-all"
                  aria-label="Share event"
                >
                  <Share2 className="h-4 w-4 sm:h-5 sm:w-5 text-white" />
                </button>
                <button
                  onClick={() => setIsFavorite(!isFavorite)}
                  className={`glass-fx p-1.5 sm:p-2 rounded-full hover:bg-white/30 transition-all ${
                    isFavorite ? "bg-red-500/30" : ""
                  }`}
                  aria-label="Favorite event"
                >
                  <Heart className={`h-4 w-4 sm:h-5 sm:w-5 ${isFavorite ? "fill-red-500 text-red-500" : "text-white"}`} />
                </button>
              </div>
              <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-heading mb-2 sm:mb-4 text-balance">{event.name}</h1>
              <div className="mb-2 sm:mb-4">
                <p className="text-sm sm:text-base md:text-lg lg:text-xl font-subheading font-semibold text-gray-200">
                  Menampilkan: {event.featuring.join(", ")}
                </p>
              </div>
              <div className="flex items-center gap-2 glass-fx px-3 sm:px-4 py-1.5 sm:py-2 rounded-full w-fit">
                <Ticket className="h-4 w-4 sm:h-5 sm:w-5 text-white" />
                <span className="text-white font-subheading font-semibold text-xs sm:text-sm">
                  {totalTicketsSold.toLocaleString("id-ID")} / {totalTickets.toLocaleString("id-ID")} tiket terjual (
                  {ticketsSoldPercentage}%)
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Ticket Purchase Card - Positioned at border (Desktop only) */}
        <div className="hidden lg:block absolute top-[calc(100%-5rem)] right-4 sm:right-6 md:right-12 w-full max-w-[calc(100%-2rem)] sm:max-w-[calc(100%-3rem)] md:w-96 z-20">
          <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md shadow-2xl">
            <CardContent className="p-4 sm:p-5 md:p-6 space-y-4 sm:space-y-5 md:space-y-6">
              {isSoldOut ? (
                <>
                  <div>
                    <h2 className="text-xl sm:text-2xl font-heading text-white mb-2">Tiket Habis Terjual</h2>
                    <p className="text-gray-400 font-body text-xs sm:text-sm">
                      Semua tiket sudah terjual. Periksa pasar jual beli tiket di bawah untuk tiket yang tersedia.
                    </p>
                  </div>
                  <div className="p-3 sm:p-4 rounded-lg border-2 border-red-500/30 bg-red-500/10">
                    <div className="flex items-center gap-2 sm:gap-3 mb-2">
                      <Ticket className="h-5 w-5 sm:h-6 sm:w-6 text-red-400" />
                      <h3 className="font-subheading font-semibold text-sm sm:text-base text-red-400">Tidak Ada Tiket Tersedia</h3>
                    </div>
                    <p className="text-gray-300 font-body text-xs sm:text-sm">
                      Jelajahi tiket jual beli dari penjual terverifikasi di bagian pasar di bawah.
                    </p>
                  </div>
                  <div className="pt-4 border-t border-white/10">
                    <p className="text-gray-400 font-body text-xs text-center">
                      Diselenggarakan oleh <span className="text-white font-semibold">{event.organizer}</span>
                    </p>
                  </div>
                </>
              ) : (
                <>
                  <div>
                    <h2 className="text-xl sm:text-2xl font-heading text-white mb-2">Dapatkan Tiket Anda</h2>
                    <p className="text-gray-400 font-body text-xs sm:text-sm">Pesan tiketmu dan jadi bagian dari momen luar biasa ini</p>
                  </div>

                  <div className="space-y-2 sm:space-y-3">
                    <div className="p-3 sm:p-4 rounded-lg border-2 border-white/10 hover:border-white/20 transition-all">
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-subheading font-semibold text-sm sm:text-base text-white">Tiket Reguler</h3>
                      </div>
                      <p className="text-xl sm:text-2xl font-heading text-white mb-1">0.0055 ETH</p>
                      <p className="text-gray-400 font-body text-xs mb-2">Masuk umum</p>
                      <div className="space-y-1 mb-3">
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-green-400 mt-0.5">✓</span>
                          <span>Akses ke area umum venue</span>
                        </p>
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-green-400 mt-0.5">✓</span>
                          <span>Tiket NFT terverifikasi <span className="italic">blockchain</span></span>
                        </p>
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-green-400 mt-0.5">✓</span>
                          <span>Akses ke semua panggung utama</span>
                        </p>
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-green-400 mt-0.5">✓</span>
                          <span>Kesempatan mendapat <span className="italic">POAP badge</span></span>
                        </p>
                      </div>
                      <div className="flex items-center justify-between pt-2 border-t border-white/10">
                        <span className="text-gray-400 font-body text-xs">Tersisa</span>
                        <span className="text-white font-subheading font-semibold text-xs sm:text-sm">
                          {regularTicketsRemaining.toLocaleString("id-ID")} /{" "}
                          {event.regularTickets.toLocaleString("id-ID")}
                        </span>
                      </div>
                    </div>

                    <div className="p-3 sm:p-4 rounded-lg border-2 border-purple-500/30 bg-purple-500/5 hover:border-purple-500/40 transition-all">
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-subheading font-semibold text-sm sm:text-base text-white">Tiket VIP</h3>
                        <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30 font-subheading text-xs">Premium</Badge>
                      </div>
                      <p className="text-xl sm:text-2xl font-heading text-white mb-1">Rp 750.000</p>
                      <p className="text-gray-400 font-body text-xs mb-2">Akses area premium dengan pengalaman eksklusif</p>
                      <div className="space-y-1 mb-3">
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-purple-400 mt-0.5">✓</span>
                          <span className="font-semibold text-purple-200">Semua benefit Tiket Reguler</span>
                        </p>
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-purple-400 mt-0.5">✓</span>
                          <span>Akses area VIP eksklusif dengan view terbaik</span>
                        </p>
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-purple-400 mt-0.5">✓</span>
                          <span>Lounge premium dengan makanan & minuman gratis</span>
                        </p>
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-purple-400 mt-0.5">✓</span>
                          <span>Prioritas masuk & jalur <span className="italic">fast-track</span></span>
                        </p>
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-purple-400 mt-0.5">✓</span>
                          <span>Merchandise eksklusif & <span className="italic">meet & greet</span></span>
                        </p>
                        <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                          <span className="text-purple-400 mt-0.5">✓</span>
                          <span>Parkir khusus VIP</span>
                        </p>
                      </div>
                      <div className="flex items-center justify-between pt-2 border-t border-purple-500/20">
                        <span className="text-gray-400 font-body text-xs">Tersisa</span>
                        <span className="text-white font-subheading font-semibold text-xs sm:text-sm">
                          {vipTicketsRemaining.toLocaleString("id-ID")} / {event.vipTickets.toLocaleString("id-ID")}
                        </span>
                      </div>
                    </div>
                  </div>

                  <Button
                    onClick={handleCheckout}
                    className="w-full h-10 sm:h-11 md:h-12 bg-gradient-to-b from-gray-400 via-gray-500 to-gray-700 hover:from-gray-300 hover:to-gray-600 text-white font-subheading font-semibold text-sm sm:text-base transition-all duration-300"
                  >
                    <Ticket className="h-4 w-4 sm:h-5 sm:w-5 mr-2" />
                    Beli Tiket
                  </Button>

                  <div className="pt-4 border-t border-white/10">
                    <p className="text-gray-400 font-body text-xs text-center">
                      Diselenggarakan oleh <span className="text-white font-semibold">{event.organizer}</span>
                    </p>
                  </div>
                </>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 sm:px-6 md:px-8 py-6 sm:py-8 pt-8 sm:pt-10 md:pt-12">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 sm:gap-8">
          {/* Event Details - Left side with space for ticket card */}
          <div className="lg:col-span-2 space-y-4 sm:space-y-6">
            {/* Ticket Purchase Card - Mobile/Tablet First */}
            <div className="lg:hidden">
              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md shadow-2xl">
                <CardContent className="p-4 sm:p-5 md:p-6 space-y-4 sm:space-y-5 md:space-y-6">
              {isSoldOut ? (
                <>
                  <div>
                    <h2 className="text-xl sm:text-2xl font-heading text-white mb-2">Tiket Habis Terjual</h2>
                    <p className="text-gray-400 font-body text-xs sm:text-sm">
                      Semua tiket sudah terjual. Periksa pasar jual beli tiket di bawah untuk tiket yang tersedia.
                    </p>
                  </div>
                  <div className="p-3 sm:p-4 rounded-lg border-2 border-red-500/30 bg-red-500/10">
                    <div className="flex items-center gap-2 sm:gap-3 mb-2">
                      <Ticket className="h-5 w-5 sm:h-6 sm:w-6 text-red-400" />
                      <h3 className="font-subheading font-semibold text-sm sm:text-base text-red-400">
                        Tidak Ada Tiket Tersedia
                      </h3>
                    </div>
                    <p className="text-gray-300 font-body text-xs sm:text-sm">
                      Jelajahi tiket jual beli dari penjual terverifikasi di bagian pasar di bawah.
                    </p>
                  </div>
                  <div className="pt-4 border-t border-white/10">
                    <p className="text-gray-400 font-body text-xs text-center">
                      Diselenggarakan oleh <span className="text-white font-semibold">{event.organizer}</span>
                    </p>
                  </div>
                </>
              ) : (
                <>
                  <div>
                    <h2 className="text-xl sm:text-2xl font-heading text-white mb-2">Dapatkan Tiket Anda</h2>
                    <p className="text-gray-400 font-body text-xs sm:text-sm">Amankan tempat Anda di acara luar biasa ini</p>
                  </div>                      <div className="space-y-2 sm:space-y-3">
                        <div className="p-3 sm:p-4 rounded-lg border-2 border-white/10 hover:border-white/20 transition-all">
                          <div className="flex justify-between items-start mb-2">
                            <h3 className="font-subheading font-semibold text-sm sm:text-base text-white">Tiket Reguler</h3>
                          </div>
                          <p className="text-xl sm:text-2xl font-heading text-white mb-1">0.0055 ETH</p>
                          <p className="text-gray-400 font-body text-xs mb-2">Masuk umum</p>
                          <div className="space-y-1 mb-3">
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-green-400 mt-0.5">✓</span>
                              <span>Akses ke area umum venue</span>
                            </p>
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-green-400 mt-0.5">✓</span>
                              <span>Tiket NFT terverifikasi <span className="italic">blockchain</span></span>
                            </p>
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-green-400 mt-0.5">✓</span>
                              <span>Akses ke semua panggung utama</span>
                            </p>
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-green-400 mt-0.5">✓</span>
                              <span>Kesempatan mendapat <span className="italic">POAP badge</span></span>
                            </p>
                          </div>
                          <div className="flex items-center justify-between pt-2 border-t border-white/10">
                            <span className="text-gray-400 font-body text-xs">Tersisa</span>
                            <span className="text-white font-subheading font-semibold text-xs sm:text-sm">
                              {regularTicketsRemaining.toLocaleString("id-ID")} /{" "}
                              {event.regularTickets.toLocaleString("id-ID")}
                            </span>
                          </div>
                        </div>

                        <div className="p-3 sm:p-4 rounded-lg border-2 border-purple-500/30 bg-purple-500/5 hover:border-purple-500/40 transition-all">
                          <div className="flex justify-between items-start mb-2">
                            <h3 className="font-subheading font-semibold text-sm sm:text-base text-white">Tiket VIP</h3>
                            <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30 font-subheading text-xs">Premium</Badge>
                          </div>
                          <p className="text-xl sm:text-2xl font-heading text-white mb-1">Rp 750.000</p>
                          <p className="text-gray-400 font-body text-xs mb-2">Akses area premium dengan pengalaman eksklusif</p>
                          <div className="space-y-1 mb-3">
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-purple-400 mt-0.5">✓</span>
                              <span className="font-semibold text-purple-200">Semua benefit Tiket Reguler</span>
                            </p>
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-purple-400 mt-0.5">✓</span>
                              <span>Akses area VIP eksklusif dengan view terbaik</span>
                            </p>
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-purple-400 mt-0.5">✓</span>
                              <span>Lounge premium dengan makanan & minuman gratis</span>
                            </p>
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-purple-400 mt-0.5">✓</span>
                              <span>Prioritas masuk & jalur <span className="italic">fast-track</span></span>
                            </p>
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-purple-400 mt-0.5">✓</span>
                              <span>Merchandise eksklusif & <span className="italic">meet & greet</span></span>
                            </p>
                            <p className="text-gray-300 font-body text-xs flex items-start gap-1.5">
                              <span className="text-purple-400 mt-0.5">✓</span>
                              <span>Parkir khusus VIP</span>
                            </p>
                          </div>
                          <div className="flex items-center justify-between pt-2 border-t border-purple-500/20">
                            <span className="text-gray-400 font-body text-xs">Tersisa</span>
                            <span className="text-white font-subheading font-semibold text-xs sm:text-sm">
                              {vipTicketsRemaining.toLocaleString("id-ID")} / {event.vipTickets.toLocaleString("id-ID")}
                            </span>
                          </div>
                        </div>
                      </div>

                      <Button
                        onClick={handleCheckout}
                        className="w-full h-10 sm:h-11 md:h-12 bg-gradient-to-b from-gray-400 via-gray-500 to-gray-700 hover:from-gray-300 hover:to-gray-600 text-white font-subheading font-semibold text-sm sm:text-base transition-all duration-300"
                      >
                        <Ticket className="h-4 w-4 sm:h-5 sm:w-5 mr-2" />
                        Beli Tiket
                      </Button>

                      <div className="pt-4 border-t border-white/10">
                        <p className="text-gray-400 font-body text-xs text-center">
                          Diselenggarakan oleh <span className="text-white font-semibold">{event.organizer}</span>
                        </p>
                      </div>
                    </>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* About Section */}
            <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
              <CardContent className="p-4 sm:p-5 md:p-6">
                <h2 className="text-xl sm:text-2xl font-heading text-white mb-3 sm:mb-4">Tentang Acara Ini</h2>
                <p className="text-gray-300 font-body leading-relaxed text-sm sm:text-base">{event.description}</p>
              </CardContent>
            </Card>

            {/* Event Information Grid */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all">
                <CardContent className="px-4 sm:px-6 py-2">
                  <div className="flex items-start gap-3 sm:gap-4">
                    <div className="flex items-center justify-center w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 border border-white/20 shrink-0">
                      <MapPin className="h-5 w-5 sm:h-6 sm:w-6 text-white" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <h3 className="font-subheading font-semibold text-sm sm:text-base text-white mb-1">Lokasi</h3>
                      <p className="text-gray-300 font-body text-xs sm:text-sm">{event.location}</p>
                      <p className="text-gray-400 font-body text-xs mt-1 break-words">{event.address}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all">
                <CardContent className="px-4 sm:px-6 py-2">
                  <div className="flex items-start gap-3 sm:gap-4">
                    <div className="flex items-center justify-center w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 border border-white/20 shrink-0">
                      <Calendar className="h-5 w-5 sm:h-6 sm:w-6 text-white" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-subheading font-semibold text-sm sm:text-base text-white mb-1">Tanggal</h3>
                      <p className="text-gray-300 font-body text-xs sm:text-sm">{event.date}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all">
                <CardContent className="px-4 sm:px-6 py-2">
                  <div className="flex items-start gap-3 sm:gap-4">
                    <div className="flex items-center justify-center w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 border border-white/20 shrink-0">
                      <Clock className="h-5 w-5 sm:h-6 sm:w-6 text-white" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-subheading font-semibold text-sm sm:text-base text-white mb-1">Waktu</h3>
                      <p className="text-gray-300 font-body text-xs sm:text-sm">{event.time}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all">
                <CardContent className="px-4 sm:px-6 py-2">
                  <div className="flex items-start gap-3 sm:gap-4">
                    <div className="flex items-center justify-center w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 border border-white/20 shrink-0">
                      <Users className="h-5 w-5 sm:h-6 sm:w-6 text-white" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-subheading font-semibold text-sm sm:text-base text-white mb-1">Kapasitas</h3>
                      <p className="text-gray-300 font-body text-xs sm:text-sm">{event.capacity}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {isSoldOut && (
              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
                <CardContent className="p-4 sm:p-5 md:p-6">
                  <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-4 mb-4 sm:mb-6">
                    <div>
                      <h2 className="text-xl sm:text-2xl font-heading text-white mb-2">Pasar Jual Beli</h2>
                      <p className="text-gray-400 font-body text-xs sm:text-sm">Tiket jual beli terverifikasi dari peserta lain</p>
                    </div>
                    <Badge className="bg-blue-500/20 text-blue-400 border-blue-500/30 font-subheading font-semibold text-xs sm:text-sm px-3 py-1 w-fit">
                      {resaleTickets.length} Tersedia
                    </Badge>
                  </div>

                  {/* Marketplace Grid */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4 mb-4 sm:mb-6">
                    {currentTickets.map((ticket) => {
                      const priceIncrease = ((ticket.price - ticket.originalPrice) / ticket.originalPrice) * 100
                      return (
                        <Card
                          key={ticket.id}
                          className="border-white/10 bg-gradient-to-br from-gray-800/50 to-gray-900/50 hover:border-white/30 transition-all cursor-pointer"
                        >
                          <CardContent className="p-3 sm:p-4">
                            <div className="flex items-start justify-between mb-2 sm:mb-3 gap-2">
                              <div className="flex-1 min-w-0">
                                <h3 className="font-subheading font-semibold text-white text-xs sm:text-sm mb-1">
                                  {ticket.type} Ticket
                                </h3>
                                <p className="text-gray-400 font-body text-xs truncate">Seller: {ticket.seller}</p>
                              </div>
                              <Badge
                                className={`${
                                  priceIncrease > 10
                                    ? "bg-orange-500/20 text-orange-400 border-orange-500/30"
                                    : "bg-green-500/20 text-green-400 border-green-500/30"
                                } font-subheading text-xs shrink-0`}
                              >
                                {priceIncrease > 0 ? "+" : ""}
                                {priceIncrease.toFixed(0)}%
                              </Badge>
                            </div>
                            <div className="mb-2 sm:mb-3">
                              <p className="text-xl sm:text-2xl font-heading text-white">
                                Rp {ticket.price.toLocaleString("id-ID")}
                              </p>
                              <p className="text-gray-500 font-body text-xs line-through">
                                Rp {ticket.originalPrice.toLocaleString("id-ID")}
                              </p>
                            </div>
                            <Button className="w-full h-8 sm:h-9 bg-gradient-to-b from-gray-400 via-gray-600 to-gray-700 hover:from-gray-300 hover:to-gray-600 text-white font-subheading font-semibold text-xs sm:text-sm">
                              Buy Now
                            </Button>
                          </CardContent>
                        </Card>
                      )
                    })}
                  </div>

                  {/* Marketplace Navigation */}
                  <div className="flex items-center justify-between pt-4 border-t border-white/10">
                    <Button
                      variant="outline"
                      onClick={() => setMarketPage((prev) => Math.max(0, prev - 1))}
                      disabled={marketPage === 0}
                      className="border-white/20 bg-white/5 hover:bg-white/10 text-white disabled:opacity-30 disabled:cursor-not-allowed"
                    >
                      <ChevronLeft className="h-4 w-4 mr-1" />
                      Sebelumnya
                    </Button>
                    <div className="text-gray-400 font-body text-sm">
                      Halaman {marketPage + 1} dari {totalPages}
                    </div>
                    <Button
                      variant="outline"
                      onClick={() => setMarketPage((prev) => Math.min(totalPages - 1, prev + 1))}
                      disabled={marketPage === totalPages - 1}
                      className="border-white/20 bg-white/5 hover:bg-white/10 text-white disabled:opacity-30 disabled:cursor-not-allowed"
                    >
                      Selanjutnya
                      <ChevronRight className="h-4 w-4 ml-1" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>

          {/* Right Column - Empty space for floating ticket card */}
          <div className="lg:col-span-1">{/* This space is reserved for the floating ticket card */}</div>
        </div>
      </div>
    </div>
  )
}
::::::::::::::
app/tickets/[id]/page.tsx
::::::::::::::
"use client"

import { use, useState, useEffect, useRef } from "react"
import { useRouter } from "next/navigation"
import Image from "next/image"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { ArrowLeft, ExternalLink, Award, Calendar, DollarSign, Hash, Clock } from "lucide-react"

// Mock ticket data with full details
const ticketsData = [
  {
    id: 1,
    eventName: "Neon Waves Festival",
    eventCover: "/images/example/cover-1.png",
    eventDate: "2025-11-15",
    eventTime: "18:00",
    eventLocation: "Sunset Arena, Los Angeles",
    ticketCategory: "VIP",
    nftCode: "NFT-23A91F8C4D2E",
    purchaseDate: "2025-10-20",
    status: "active",
    salePrice: "0.25 ETH",
    salePriceUSD: "$500.00",
    transactionHash: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb9A1F3D8E2C4B6A8",
    transactionHistory: [
      {
        id: 1,
        type: "purchase",
        from: "Primary Sale",
        to: "0x742d35Cc...f0bEb",
        price: "0.25 ETH",
        date: "2025-10-20",
        time: "14:32",
      },
    ],
    poapBadge: {
      name: "Neon Waves 2025 Attendee",
      image: "/neon-waves-festival-badge.jpg",
      earned: false,
    },
  },
  {
    id: 2,
    eventName: "Islands of Sound 2025",
    eventCover: "/images/example/cover-2.png",
    eventDate: "2025-12-01",
    eventTime: "16:00",
    eventLocation: "Beach Paradise, Miami",
    ticketCategory: "Regular",
    nftCode: "NFT-7B5E9A1C3F6D",
    purchaseDate: "2025-10-15",
    status: "active",
    salePrice: "45.00 SOL",
    salePriceUSD: "$900.00",
    transactionHash: "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063B2E4D7F1A9C5",
    transactionHistory: [
      {
        id: 1,
        type: "purchase",
        from: "Primary Sale",
        to: "0x8f3Cf7ad...6A063",
        price: "45.00 SOL",
        date: "2025-10-15",
        time: "16:45",
      },
    ],
    poapBadge: {
      name: "Islands of Sound Explorer",
      image: "/tropical-island-music-badge.jpg",
      earned: false,
    },
  },
  {
    id: 3,
    eventName: "Sonic Future Conference",
    eventCover: "/images/example/cover-3.png",
    eventDate: "2025-10-05",
    eventTime: "09:00",
    eventLocation: "Tech Hub, San Francisco",
    ticketCategory: "VIP",
    nftCode: "NFT-4D8F2A6B9E1C",
    purchaseDate: "2025-09-28",
    status: "used",
    salePrice: "0.12 ETH",
    salePriceUSD: "$240.00",
    transactionHash: "0x1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d",
    transactionHistory: [
      {
        id: 1,
        type: "purchase",
        from: "Primary Sale",
        to: "0x1a2b3c4d...7c8d",
        price: "0.12 ETH",
        date: "2025-09-28",
        time: "13:55",
      },
    ],
    poapBadge: {
      name: "Sonic Future Pioneer",
      image: "/futuristic-tech-conference-badge.jpg",
      earned: true,
    },
  },
  {
    id: 4,
    eventName: "Taste & Tunes Fest",
    eventCover: "/images/example/cover-4.png",
    eventDate: "2025-11-20",
    eventTime: "12:00",
    eventLocation: "Central Park, New York",
    ticketCategory: "Regular",
    nftCode: "NFT-9C3E7F1A5B8D",
    purchaseDate: "2025-09-15",
    status: "active",
    salePrice: "0.08 ETH",
    salePriceUSD: "$160.00",
    transactionHash: "0x9e8d7c6b5a4f3e2d1c0b9a8f7e6d5c4b3a2f1e0d9c8b7a6f5e4d3c2b",
    transactionHistory: [
      {
        id: 1,
        type: "purchase",
        from: "Primary Sale",
        to: "0x5a4b3c2d...8b9a",
        price: "0.06 ETH",
        date: "2025-09-10",
        time: "10:20",
      },
      {
        id: 2,
        type: "resale",
        from: "0x5a4b3c2d...8b9a",
        to: "0x9e8d7c6b...3c2b",
        price: "0.08 ETH",
        date: "2025-09-15",
        time: "15:30",
      },
    ],
    poapBadge: {
      name: "Taste & Tunes Foodie",
      image: "/food-and-music-festival-badge.jpg",
      earned: false,
    },
  },
  {
    id: 5,
    eventName: "Rhythm Arena 2025",
    eventCover: "/images/example/cover-5.png",
    eventDate: "2025-09-10",
    eventTime: "20:00",
    eventLocation: "Grand Stadium, Chicago",
    ticketCategory: "VIP",
    nftCode: "NFT-6A2D8E4C1F9B",
    purchaseDate: "2025-08-30",
    status: "used",
    salePrice: "0.35 ETH",
    salePriceUSD: "$700.00",
    transactionHash: "0x2f3e4d5c6b7a8f9e0d1c2b3a4f5e6d7c8b9a0f1e2d3c4b5a6f7e8d9c",
    transactionHistory: [
      {
        id: 1,
        type: "purchase",
        from: "Primary Sale",
        to: "0x2f3e4d5c...8d9c",
        price: "0.35 ETH",
        date: "2025-08-30",
        time: "11:45",
      },
    ],
    poapBadge: {
      name: "Rhythm Arena Legend",
      image: "/concert-arena-music-badge.jpg",
      earned: true,
    },
  },
  {
    id: 6,
    eventName: "Rock Concert Night",
    eventCover: "/images/example/example-cover.png",
    eventDate: "2025-11-30",
    eventTime: "19:30",
    eventLocation: "Rock Hall, Seattle",
    ticketCategory: "Regular",
    nftCode: "NFT-1F7B3D9A5E2C",
    purchaseDate: "2025-08-12",
    status: "active",
    salePrice: "0.15 ETH",
    salePriceUSD: "$300.00",
    transactionHash: "0x7e6d5c4b3a2f1e0d9c8b7a6f5e4d3c2b1a0f9e8d7c6b5a4f3e2d1c0b",
    transactionHistory: [
      {
        id: 1,
        type: "purchase",
        from: "Primary Sale",
        to: "0x3c4d5e6f...2d1c",
        price: "0.12 ETH",
        date: "2025-08-05",
        time: "14:15",
      },
      {
        id: 2,
        type: "resale",
        from: "0x3c4d5e6f...2d1c",
        to: "0x7e6d5c4b...1c0b",
        price: "0.15 ETH",
        date: "2025-08-12",
        time: "09:30",
      },
    ],
    poapBadge: {
      name: "Rock Night Rocker",
      image: "/rock-concert-badge.jpg",
      earned: false,
    },
  },
]

export default function TicketDetailPage({ params }: { params: Promise<{ id: string }> }) {
  const resolvedParams = use(params)
  const router = useRouter()
  const ticketId = Number.parseInt(resolvedParams.id)
  const ticket = ticketsData.find((t) => t.id === ticketId)
  const ticketRef = useRef<HTMLDivElement>(null)
  const [rotation, setRotation] = useState({ x: 0, y: 0 })

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (!ticketRef.current) return

      const rect = ticketRef.current.getBoundingClientRect()
      const centerX = rect.left + rect.width / 2
      const centerY = rect.top + rect.height / 2

      const mouseX = e.clientX - centerX
      const mouseY = e.clientY - centerY

      const maxTilt = 5
      const rotateY = (mouseX / (rect.width / 2)) * maxTilt
      const rotateX = -(mouseY / (rect.height / 2)) * maxTilt

      setRotation({ x: rotateX, y: rotateY })
    }

    const handleMouseLeave = () => {
      setRotation({ x: 0, y: 0 })
    }

    document.addEventListener("mousemove", handleMouseMove)
    document.addEventListener("mouseleave", handleMouseLeave)

    return () => {
      document.removeEventListener("mousemove", handleMouseMove)
      document.removeEventListener("mouseleave", handleMouseLeave)
    }
  }, [])

  if (!ticket) {
    return (
      <div className="min-h-screen bg-background pt-32 pb-12">
        <div className="container mx-auto px-4 max-w-4xl text-center">
          <h1 className="text-3xl font-heading text-white mb-4">Tiket Tidak Ditemukan</h1>
          <Button
            onClick={() => router.push("/profile")}
            className="bg-linear-to-b from-gray-400 via-gray-600 to-gray-700"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Kembali ke Profil
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background pt-32 pb-12 relative overflow-hidden">
      {/* Dark Cyan-Turquoise Ambient Background */}
      <div className="fixed inset-0 overflow-hidden opacity-70 pointer-events-none">
        <div className="absolute top-0 -left-1/3 w-2/3 h-full bg-gradient-radial from-cyan-600/80 to-transparent animate-pulse-slow" />
        <div className="absolute bottom-0 -right-1/3 w-2/3 h-full bg-gradient-radial from-teal-600/60 to-transparent animate-pulse-slow animation-delay-2000" />
        <div className="absolute top-1/4 -left-48 w-96 h-96 bg-cyan-500/40 rounded-full blur-3xl animate-float-drift" />
        <div className="absolute bottom-1/4 -right-48 w-96 h-96 bg-teal-500/40 rounded-full blur-3xl animate-float-drift animation-delay-4000" />
      </div>

      <div className="container mx-auto px-4 max-w-7xl relative z-10">
        {/* Back Button */}
        <Button
          variant="ghost"
          onClick={() => router.push("/profile")}
          className="mb-6 text-gray-400 hover:text-white hover:bg-white/10"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Kembali ke Tiketku
        </Button>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Main ticket design */}
            <div className="relative overflow-hidden bg-linear-to-br from-gray-900 via-gray-950 to-black border border-white/20 shadow-2xl rounded-lg">
              {/* Background Pattern */}
              <div className="absolute inset-0 opacity-5">
                <div
                  className="absolute inset-0"
                  style={{
                    backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 10px, rgba(255,255,255,0.1) 10px, rgba(255,255,255,0.1) 20px)`,
                  }}
                />
              </div>            {/* Event Cover Header */}
            <div className="relative h-64 w-full overflow-hidden">
              <Image
                src={ticket.eventCover || "/placeholder.svg"}
                alt={ticket.eventName}
                fill
                className="object-cover"
              />
              <div className="absolute inset-0 bg-linear-to-t from-black via-black/60 to-transparent" />

              {/* Status Badge */}
              <div className="absolute top-6 right-6">
                <Badge
                  className={`font-subheading font-bold text-sm px-4 py-2 ${
                    ticket.status === "active"
                      ? "bg-green-500 text-white border-green-400"
                      : "bg-white text-gray-900 border-white"
                  }`}
                >
                  {ticket.status === "active" ? "Aktif / Belum Ditukar" : "Terpakai"}
                </Badge>
              </div>

              {/* Event Info Overlay */}
              <div className="absolute bottom-6 left-6 right-6">
                <h1 className="text-3xl font-heading text-white mb-2 text-balance">{ticket.eventName}</h1>
                <div className="flex flex-wrap items-center gap-4 text-gray-300 font-body text-sm">
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4" />
                    <span>
                      {new Date(ticket.eventDate).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}{" "}
                      pukul {ticket.eventTime}
                    </span>
                  </div>
                  <span className="text-gray-600">•</span>
                  <span>{ticket.eventLocation}</span>
                </div>
              </div>
            </div>

            {/* Ticket Content */}
            <div className="p-8 space-y-6">
              {/* QR Code and Ticket Category */}
              <div className="flex flex-col md:flex-row gap-6 items-start">
                {/* QR Code */}
                <div className="shrink-0">
                  <div className="p-4 bg-white rounded-xl">
                    <Image
                      src={`/images/example/qr-example.png?height=180&width=180&query=QR code for ${ticket.nftCode}`}
                      alt="QR Code"
                      width={180}
                      height={180}
                      className="w-full h-auto"
                    />
                  </div>
                  <p className="text-center text-xs text-gray-400 font-body mt-2">Pindai saat check-in di venue</p>
                </div>

                {/* Ticket Details */}
                <div className="flex-1 space-y-4">
                  {/* Ticket Category */}
                  <div className="flex items-center justify-between p-4 rounded-lg bg-white/5 border border-white/10">
                    <span className="text-gray-400 font-body text-sm">Kategori Tiket</span>
                    <Badge
                      className={`font-subheading font-bold text-sm px-4 py-1.5 ${
                        ticket.ticketCategory === "VIP"
                          ? "bg-purple-500/20 text-purple-300 border-purple-500/40"
                          : "bg-blue-500/20 text-blue-300 border-blue-500/40"
                      }`}
                    >
                      {ticket.ticketCategory}
                    </Badge>
                  </div>

                  {/* NFT Code */}
                  <div className="p-4 rounded-lg bg-white/5 border border-white/10">
                    <div className="flex items-center gap-2 mb-2">
                      <Hash className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-400 font-body text-sm">Kode NFT</span>
                    </div>
                    <p className="text-lg text-white font-mono font-semibold">#{ticket.nftCode}</p>
                  </div>

                  {/* Sale Price */}
                  <div className="p-4 rounded-lg bg-white/5 border border-white/10">
                    <div className="flex items-center gap-2 mb-2">
                      <DollarSign className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-400 font-body text-sm">Harga Jual</span>
                    </div>
                    <p className="text-lg text-white font-subheading font-bold">{ticket.salePrice}</p>
                    <p className="text-sm text-gray-400 font-body">{ticket.salePriceUSD}</p>
                  </div>

                  {/* Purchase Date */}
                  <div className="p-4 rounded-lg bg-white/5 border border-white/10">
                    <div className="flex items-center gap-2 mb-2">
                      <Clock className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-400 font-body text-sm">Tanggal Pembelian</span>
                    </div>
                    <p className="text-lg text-white font-subheading font-semibold">
                      {new Date(ticket.purchaseDate).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </p>
                  </div>
                </div>
              </div>

              {/* Transaction Hash */}
              <div className="p-4 rounded-lg bg-linear-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20">
                <div className="flex items-center justify-between gap-4">
                  <div className="flex-1 min-w-0">
                    <p className="text-gray-400 font-body text-sm mb-1">Hash Transaksi di Sophon</p>
                    <p className="text-white font-mono text-sm truncate">{ticket.transactionHash}</p>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="shrink-0 text-blue-400 hover:text-blue-300 hover:bg-blue-500/10"
                    onClick={() => window.open(`https://sophon.xyz/tx/${ticket.transactionHash}`, "_blank")}
                  >
                    <ExternalLink className="h-4 w-4 mr-2" />
                    Lihat
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Transaction History */}
          {ticket.transactionHistory.length > 0 && (
            <Card className="border-white/10 bg-linear-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
              <CardContent className="p-6">
                <h2 className="text-xl font-subheading font-semibold text-white mb-4">Riwayat Transaksi</h2>
                <div className="space-y-3">
                {ticket.transactionHistory.map((transaction, index) => (
                  <div
                    key={transaction.id}
                    className="p-4 rounded-lg bg-white/5 border border-white/10 hover:bg-white/10 transition-colors"
                  >
                    <div className="flex items-start justify-between gap-4">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <Badge
                            variant="outline"
                            className={`text-xs font-body ${
                              transaction.type === "purchase"
                                ? "border-green-500/30 text-green-400"
                                : "border-blue-500/30 text-blue-400"
                            }`}
                          >
                            {transaction.type === "purchase" ? "Penjualan Primer" : "Jual Beli"}
                          </Badge>
                          {index === ticket.transactionHistory.length - 1 && (
                            <Badge variant="outline" className="text-xs font-body border-purple-500/30 text-purple-400">
                              Pemilik Saat Ini
                            </Badge>
                          )}
                        </div>
                        <div className="space-y-1 text-sm">
                          <div className="flex items-center gap-2 text-gray-400 font-body">
                            <span>Dari:</span>
                            <span className="text-white font-mono">{transaction.from}</span>
                          </div>
                          <div className="flex items-center gap-2 text-gray-400 font-body">
                            <span>Ke:</span>
                            <span className="text-white font-mono">{transaction.to}</span>
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="text-lg font-subheading font-bold text-white">{transaction.price}</p>
                        <p className="text-xs text-gray-400 font-body mt-1">
                          {transaction.date} pukul {transaction.time}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
            </div>
          </CardContent>
        </Card>
        )}

        {/* POAP Badge */}
        <Card className="border-white/10 bg-linear-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
          <CardContent className="p-6">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 rounded-full bg-linear-to-br from-yellow-500 to-orange-600 flex items-center justify-center">
                <Award className="h-5 w-5 text-white" />
              </div>
              <h2 className="text-xl font-subheading font-semibold text-white">Bukti Protokol Kehadiran (POAP)</h2>
            </div>

            <div className="flex flex-col md:flex-row items-center gap-6 p-6 rounded-lg bg-linear-to-br from-yellow-500/10 to-orange-500/10 border border-yellow-500/20">
              <div className="shrink-0">
                <div className="relative w-32 h-32 rounded-full overflow-hidden border-4 border-yellow-500/30">
                  <Image
                    src={ticket.poapBadge.image || "/placeholder.svg"}
                    alt={ticket.poapBadge.name}
                    fill
                    className="object-cover"
                  />
                  {!ticket.poapBadge.earned && (
                    <div className="absolute inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center">
                      <span className="text-white font-subheading font-bold text-sm">Terkunci</span>
                    </div>
                  )}
                </div>
              </div>
              <div className="flex-1 text-center md:text-left">
                <h3 className="text-xl font-subheading font-bold text-white mb-2">{ticket.poapBadge.name}</h3>
                {ticket.poapBadge.earned ? (
                  <div>
                    <Badge className="bg-green-500/20 text-green-400 border-green-500/30 font-subheading mb-2">
                      Diperoleh
                    </Badge>
                    <p className="text-gray-400 font-body text-sm">
                      Selamat! Anda telah memperoleh lencana POAP ini karena menghadiri acara.
                    </p>
                  </div>
                ) : (
                  <div>
                    <Badge className="bg-gray-500/20 text-gray-400 border-gray-500/30 font-subheading mb-2">
                      Belum Diperoleh
                    </Badge>
                    <p className="text-gray-400 font-body text-sm">
                      Hadiri acara dan check-in di venue untuk memperoleh lencana POAP eksklusif ini.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Right Column - Interactive 3D Ticket (Desktop Only) */}
      <div className="hidden lg:block lg:col-span-1">
        <div className="sticky top-36">
          <div
            ref={ticketRef}
            className="relative"
            style={{
              perspective: "1000px",
              transformStyle: "preserve-3d",
            }}
          >
            <div
              className="relative overflow-hidden bg-linear-to-br from-gray-900 via-gray-950 to-black border border-white/20 shadow-2xl transition-transform duration-100 ease-out"
              style={{
                transform: `rotateX(${rotation.x}deg) rotateY(${rotation.y}deg)`,
                clipPath: "polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px)",
              }}
            >
              {/* Background Pattern */}
              <div className="absolute inset-0 opacity-5">
                <div
                  className="absolute inset-0"
                  style={{
                    backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 10px, rgba(255,255,255,0.1) 10px, rgba(255,255,255,0.1) 20px)`,
                  }}
                />
              </div>

              {/* Ticket Content */}
              <div className="relative p-6 space-y-4">
                {/* Event Name */}
                <div>
                  <h3 className="text-2xl font-heading text-white mb-2">{ticket.eventName}</h3>
                  <Badge
                    className={`font-subheading font-bold text-xs px-3 py-1 ${
                      ticket.ticketCategory === "VIP"
                        ? "bg-purple-500/20 text-purple-300 border-purple-500/40"
                        : "bg-blue-500/20 text-blue-300 border-blue-500/40"
                    }`}
                  >
                    {ticket.ticketCategory}
                  </Badge>
                </div>

                {/* Divider */}
                <div className="border-t border-white/10 border-dashed" />

                {/* Event Details */}
                <div className="space-y-3 text-sm">
                  <div>
                    <p className="text-gray-400 font-body text-xs mb-1">Tanggal & Waktu</p>
                    <p className="text-white font-subheading font-semibold">
                      {new Date(ticket.eventDate).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "short",
                        year: "numeric",
                      })}
                    </p>
                    <p className="text-gray-300 font-body">{ticket.eventTime}</p>
                  </div>

                  <div>
                    <p className="text-gray-400 font-body text-xs mb-1">Lokasi</p>
                    <p className="text-white font-subheading font-semibold text-sm">{ticket.eventLocation}</p>
                  </div>

                  <div>
                    <p className="text-gray-400 font-body text-xs mb-1">Kode NFT</p>
                    <p className="text-white font-mono text-xs break-all">#{ticket.nftCode}</p>
                  </div>
                </div>

                {/* Divider */}
                <div className="border-t border-white/10 border-dashed" />

                {/* Barcode */}
                <div className="space-y-2">
                  <div className="flex gap-[2px] h-16">
                    {Array.from({ length: 30 }).map((_, i) => (
                      <div
                        key={i}
                        className="flex-1 bg-white"
                        style={{
                          opacity: Math.random() > 0.3 ? 1 : 0.3,
                        }}
                      />
                    ))}
                  </div>
                  <p className="text-center text-gray-400 font-mono text-xs">{ticket.nftCode}</p>
                </div>
              </div>

              {/* Corner decorations */}
              <div className="absolute top-0 left-0 w-4 h-4 border-t-2 border-l-2 border-white/30" />
              <div className="absolute bottom-0 right-0 w-4 h-4 border-b-2 border-r-2 border-white/30" />
            </div>
          </div>
        </div>
      </div>
      </div>
      </div>

      {/* Custom animations */}
      <style jsx>{`
        @keyframes pulse-slow {
          0%, 100% { opacity: 0.25; }
          33% { opacity: 0.35; }
          66% { opacity: 0.45; }
        }
        @keyframes float-drift {
          0%, 100% { transform: translate(0px, 0px); opacity: 0.2; }
          25% { transform: translate(30px, -25px); opacity: 0.25; }
          50% { transform: translate(-20px, -40px); opacity: 0.3; }
          75% { transform: translate(-35px, -15px); opacity: 0.25; }
        }
        .animate-pulse-slow {
          animation: pulse-slow 12s ease-in-out infinite;
          opacity: 0.25;
        }
        .animate-float-drift {
          animation: float-drift 20s ease-in-out infinite;
          opacity: 0.2;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
        .bg-gradient-radial {
          background: radial-gradient(circle, var(--tw-gradient-stops));
        }
      `}</style>
    </div>
  )
}::::::::::::::
components/conditional-navbar.tsx
::::::::::::::
"use client"

import { usePathname } from "next/navigation"
import { Navbar } from "./navbar"

export function ConditionalNavbar() {
  const pathname = usePathname()
  
  // Hide navbar on login and register pages
  const hideNavbar = pathname === "/login" || pathname === "/register"
  
  if (hideNavbar) {
    return null
  }
  
  return <Navbar />
}
::::::::::::::
components/navbar.tsx
::::::::::::::
"use client"

import Link from "next/link"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Menu, X, LogOut, Shield, Briefcase, Wallet, User } from "lucide-react"
import { useState, useEffect } from "react"
import { useRouter, usePathname } from "next/navigation"
import { blockchainService } from "@/lib/blockchain"
import { apiClient } from "@/lib/api"

export function Navbar() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [walletAddress, setWalletAddress] = useState<string | null>(null)
  const [username, setUsername] = useState<string | null>(null)
  const [userRole, setUserRole] = useState<'USER' | 'EO' | 'ADMIN' | null>(null)
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const router = useRouter()
  const pathname = usePathname()

  useEffect(() => {
    checkAuth()
  }, [])

  const checkAuth = async () => {
    try {
      const token = apiClient.getToken()
      if (!token) {
        setIsLoggedIn(false)
        setUserRole(null)
        setWalletAddress(null)
        setUsername(null)
        return
      }

      const { user } = await apiClient.verifyToken()
      setUserRole(user.role)
      setIsLoggedIn(true)
      setUsername(user.username || user.email?.split('@')[0] || 'User')
      
      if (user.walletAddress) {
        setWalletAddress(user.walletAddress)
      }
    } catch (error) {
      console.error("Error checking auth:", error)
      setIsLoggedIn(false)
      setUserRole(null)
      setWalletAddress(null)
      setUsername(null)
      apiClient.clearToken()
    }
  }

  const handleConnectWallet = async () => {
    try {
      if (!isLoggedIn) {
        alert('Please login first before connecting wallet');
        router.push('/login');
        return;
      }

      const address = await blockchainService.connectWallet()
      
      const nonceResponse = await apiClient.getWalletNonce(address)
      const signature = await blockchainService.signMessage(nonceResponse.message)
      
      const response = await apiClient.connectWallet(address, signature, nonceResponse.message)
      
      console.log('Connect wallet response:', response)
      
      setWalletAddress(address)
      
      if (response.user.username) {
        setUsername(response.user.username)
      }
      
      await checkAuth()
    } catch (error: any) {
      console.error("Error connecting wallet:", error)
      alert(error.message || "Failed to connect wallet")
    }
  }

  const handleDisconnectWallet = async () => {
    try {
      await apiClient.disconnectWallet()
      blockchainService.disconnect()
      setWalletAddress(null)
      await checkAuth()
    } catch (error) {
      console.error("Error disconnecting wallet:", error)
    }
  }

  const handleLogout = async () => {
    try {
      await apiClient.logout()
      blockchainService.disconnect()
      setWalletAddress(null)
      setUserRole(null)
      setIsLoggedIn(false)
      setUsername(null)
      router.push("/login")
    } catch (error) {
      console.error("Error during logout:", error)
      apiClient.clearToken()
      setWalletAddress(null)
      setUserRole(null)
      setIsLoggedIn(false)
      setUsername(null)
      router.push("/login")
    }
  }

  const formatAddress = (address: string) => {
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`
  }

  const getDashboardLink = () => {
    if (userRole === 'ADMIN') return '/admin/dashboard'
    if (userRole === 'EO') return '/eo/dashboard'
    return '/profile'
  }

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 px-4 py-4 md:px-8">
      <div className="mx-auto max-w-7xl">
        <div className="glass-fx flex items-center justify-between px-4 py-3">
          <Link href="/events" className="flex items-center gap-2 transition-opacity hover:opacity-80">
            <div className="relative w-48 h-8 sm:w-48 sm:h-10 md:w-64">
              <Image src="/images/app-logo.png" alt="App Logo" fill className="object-contain" />
            </div>
          </Link>

          <div className="hidden md:flex items-center gap-2 md:gap-4">
            <Link href="/events">
              <Button
                variant="ghost"
                className={`font-body text-sm transition-colors md:text-base ${
                  pathname === "/events" || pathname?.startsWith("/events/")
                    ? "bg-white/20 text-white font-semibold"
                    : "text-white/90 hover:bg-white/10 hover:text-white"
                }`}
              >
                Beranda Event
              </Button>
            </Link>

            <Link href="/explore-tickets">
              <Button
                variant="ghost"
                className={`font-body text-sm transition-colors md:text-base ${
                  pathname === "/explore-tickets"
                    ? "bg-white/20 text-white font-semibold"
                    : "text-white/90 hover:bg-white/10 hover:text-white"
                }`}
              >
                Jelajahi Tiket
              </Button>
            </Link>

            {isLoggedIn && (
              <>
                {(userRole === 'ADMIN' || userRole === 'EO') && (
                  <Link href={getDashboardLink()}>
                    <Button
                      variant="ghost"
                      className="font-body text-sm text-white/90 transition-colors hover:bg-white/10 hover:text-white md:text-base"
                    >
                      {userRole === 'ADMIN' ? (
                        <>
                          <Shield className="h-4 w-4 mr-2" />
                          Admin Dashboard
                        </>
                      ) : (
                        <>
                          <Briefcase className="h-4 w-4 mr-2" />
                          EO Dashboard
                        </>
                      )}
                    </Button>
                  </Link>
                )}
                
                {userRole === 'USER' && (
                  <Link href="/profile?tab=my-tickets">
                    <Button
                      variant="ghost"
                      className="font-body text-sm transition-colors md:text-base text-white/90 hover:bg-white/10 hover:text-white"
                    >
                      Tiketku
                    </Button>
                  </Link>
                )}
                
                <Link href="/profile">
                  <Button
                    variant="ghost"
                    className={`font-body text-sm transition-colors md:text-base ${
                      pathname === "/profile" || pathname?.startsWith("/tickets/")
                        ? "bg-white/20 text-white font-semibold hover:bg-white hover:text-black"
                        : "text-white/90 hover:bg-white/10 hover:text-white"
                    }`}
                  >
                    Profil
                  </Button>
                </Link>
              </>
            )}

            {isLoggedIn ? (
              <>
                <div className="h-6 w-px bg-white/20" />
                <div className="flex items-center gap-2">
                  {/* Username Display */}
                  <div className="flex items-center gap-2 px-3 py-1.5 rounded-lg bg-white/5 border border-white/10">
                    <User className="h-4 w-4 text-white/70" />
                    <span className="text-sm text-white font-subheading font-semibold">
                      {username}
                    </span>
                  </div>
                  
                  {userRole && (
                    <Badge className={`text-xs font-subheading font-semibold ${
                      userRole === 'ADMIN' ? 'bg-red-500/20 text-red-400 border-red-500/30' :
                      userRole === 'EO' ? 'bg-blue-500/20 text-blue-400 border-blue-500/30' :
                      'bg-green-500/20 text-green-400 border-green-500/30'
                    }`}>
                      {userRole}
                    </Badge>
                  )}
                  
                  {walletAddress ? (
                    <>
                      <span className="text-sm text-white/70 font-mono">
                        {formatAddress(walletAddress)}
                      </span>
                      <Button
                        variant="ghost"
                        size="icon-sm"
                        onClick={handleDisconnectWallet}
                        className="text-white/90 hover:bg-yellow-500/20 hover:text-yellow-400"
                        title="Disconnect Wallet"
                      >
                        <Wallet className="h-4 w-4" />
                      </Button>
                    </>
                  ) : (
                    <Button
                      onClick={handleConnectWallet}
                      variant="outline"
                      size="sm"
                      className="border-white/20 text-white hover:bg-white/10"
                    >
                      <Wallet className="h-4 w-4 mr-2" />
                      Hubungkan Wallet
                    </Button>
                  )}
                  
                  <Button
                    variant="ghost"
                    size="icon-sm"
                    onClick={handleLogout}
                    className="text-white/90 hover:bg-red-500/20 hover:text-red-400"
                    title="Logout"
                  >
                    <LogOut className="h-4 w-4" />
                  </Button>
                </div>
              </>
            ) : (
              <Link href="/login">
                <Button className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-subheading font-semibold">
                  Login
                </Button>
              </Link>
            )}
          </div>

          <button
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="md:hidden glass-fx p-2 rounded-lg hover:bg-white/10 transition-colors"
            aria-label="Toggle menu"
          >
            {isMenuOpen ? (
              <X className="h-6 w-6 text-white" />
            ) : (
              <Menu className="h-6 w-6 text-white" />
            )}
          </button>
        </div>

        {isMenuOpen && (
          <div className="md:hidden mt-2 glass-fx px-4 py-3 space-y-2">
            <Link href="/events" onClick={() => setIsMenuOpen(false)}>
              <Button
                variant="ghost"
                className={`w-full justify-start font-body text-sm transition-colors ${
                  pathname === "/events" || pathname?.startsWith("/events/")
                    ? "bg-white/20 text-white font-semibold"
                    : "text-white/90 hover:bg-white/10 hover:text-white"
                }`}
              >
                Beranda Event
              </Button>
            </Link>

            <Link href="/explore-tickets" onClick={() => setIsMenuOpen(false)}>
              <Button
                variant="ghost"
                className={`w-full justify-start font-body text-sm transition-colors ${
                  pathname === "/explore-tickets"
                    ? "bg-white/20 text-white font-semibold"
                    : "text-white/90 hover:bg-white/10 hover:text-white"
                }`}
              >
                Jelajahi Tiket
              </Button>
            </Link>

            {isLoggedIn && (
              <>
                {(userRole === 'ADMIN' || userRole === 'EO') && (
                  <Link href={getDashboardLink()} onClick={() => setIsMenuOpen(false)}>
                    <Button
                      variant="ghost"
                      className="w-full justify-start font-body text-sm text-white/90 transition-colors hover:bg-white/10 hover:text-white"
                    >
                      {userRole === 'ADMIN' ? (
                        <>
                          <Shield className="h-4 w-4 mr-2" />
                          Admin Dashboard
                        </>
                      ) : (
                        <>
                          <Briefcase className="h-4 w-4 mr-2" />
                          EO Dashboard
                        </>
                      )}
                    </Button>
                  </Link>
                )}
                
                {userRole === 'USER' && (
                  <Link href="/profile?tab=my-tickets" onClick={() => setIsMenuOpen(false)}>
                    <Button
                      variant="ghost"
                      className="w-full justify-start font-body text-sm transition-colors text-white/90 hover:bg-white/10 hover:text-white"
                    >
                      Tiketku
                    </Button>
                  </Link>
                )}
                
                <Link href="/profile" onClick={() => setIsMenuOpen(false)}>
                  <Button
                    variant="ghost"
                    className={`w-full justify-start font-body text-sm transition-colors ${
                      pathname === "/profile" || pathname?.startsWith("/tickets/")
                        ? "bg-white/20 text-white font-semibold hover:bg-white hover:text-black"
                        : "text-white/90 hover:bg-white/10 hover:text-white"
                    }`}
                  >
                    Profil
                  </Button>
                </Link>
              </>
            )}
            
            {isLoggedIn ? (
              <>
                <div className="border-t border-white/10 my-2" />
                <div className="p-2 rounded-lg bg-white/5">
                  <div className="flex items-center justify-between mb-2">
                    <p className="text-xs text-white/50">Account</p>
                    {userRole && (
                      <Badge className={`text-xs font-subheading font-semibold ${
                        userRole === 'ADMIN' ? 'bg-red-500/20 text-red-400 border-red-500/30' :
                        userRole === 'EO' ? 'bg-blue-500/20 text-blue-400 border-blue-500/30' :
                        'bg-green-500/20 text-green-400 border-green-500/30'
                      }`}>
                        {userRole}
                      </Badge>
                    )}
                  </div>
                  <p className="text-sm text-white font-subheading font-semibold mb-1">{username}</p>
                  {walletAddress && (
                    <p className="text-sm text-white/70 font-mono">{formatAddress(walletAddress)}</p>
                  )}
                </div>
                
                {walletAddress ? (
                  <Button
                    variant="ghost"
                    onClick={() => {
                      handleDisconnectWallet()
                      setIsMenuOpen(false)
                    }}
                    className="w-full justify-start font-body text-sm text-yellow-400 hover:bg-yellow-500/20 hover:text-yellow-300"
                  >
                    <Wallet className="h-4 w-4 mr-2" />
                    Disconnect Wallet
                  </Button>
                ) : (
                  <Button
                    onClick={() => {
                      handleConnectWallet()
                      setIsMenuOpen(false)
                    }}
                    variant="ghost"
                    className="w-full justify-start font-body text-sm text-white/90 hover:bg-white/10"
                  >
                    <Wallet className="h-4 w-4 mr-2" />
                    Connect Wallet
                  </Button>
                )}
                
                <Button
                  variant="ghost"
                  onClick={() => {
                    handleLogout()
                    setIsMenuOpen(false)
                  }}
                  className="w-full justify-start font-body text-sm text-red-400 hover:bg-red-500/20 hover:text-red-300"
                >
                  <LogOut className="h-4 w-4 mr-2" />
                  Logout
                </Button>
              </>
            ) : (
              <Link href="/login" onClick={() => setIsMenuOpen(false)}>
                <Button className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-subheading font-semibold">
                  Login
                </Button>
              </Link>
            )}
          </div>
        )}
      </div>
    </nav>
  )
}import { ethers } from 'ethers';

const EVENT_CHAIN_ABI = [
  "function buyTickets(uint256 eventId, uint256 typeId, uint256 quantity, address[] beneficiaries, uint256[] percentages) external payable returns (uint256[])",
  "function listTicketForResale(uint256 ticketId, uint256 resalePrice, uint256 resaleDeadline) external",
  "function buyResaleTicket(uint256 ticketId) external payable",
  "function getTicketDetails(uint256 ticketId) external view returns (tuple(uint256 ticketId, uint256 eventId, uint256 typeId, address currentOwner, uint256 originalPrice, bool isUsed, uint256 mintedAt, uint256 usedAt, bool isForResale, uint256 resalePrice, uint256 resaleDeadline, uint8 resaleCount))",
  "function getUserTickets(address user) external view returns (uint256[])",
  "function canResell(uint256 ticketId) external view returns (bool)",
  "function getMaxResalePrice(uint256 ticketId) external view returns (uint256)"
];

const CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_CONTRACT_ADDRESS || '';

export class BlockchainService {
  private provider: ethers.BrowserProvider | null = null;
  private contract: ethers.Contract | null = null;
  private signer: ethers.Signer | null = null;
  private isConnecting: boolean = false;

  async connectWallet(): Promise<string> {
    if (this.isConnecting) {
      throw new Error('Connection already in progress');
    }

    if (typeof window === 'undefined' || !window.ethereum) {
      throw new Error('MetaMask not installed. Please install MetaMask to continue.');
    }

    try {
      this.isConnecting = true;
      
      this.disconnect();
      
      this.provider = new ethers.BrowserProvider(window.ethereum);
      
      const accounts = await this.provider.send('eth_requestAccounts', []);
      
      if (!accounts || accounts.length === 0) {
        throw new Error('No accounts found. Please unlock MetaMask.');
      }

      this.signer = await this.provider.getSigner();
      this.contract = new ethers.Contract(CONTRACT_ADDRESS, EVENT_CHAIN_ABI, this.signer);

      return accounts[0];
    } catch (error: any) {
      this.disconnect();
      console.error('Error connecting wallet:', error);
      
      if (error.code === 4001) {
        throw new Error('Connection request rejected by user');
      }
      
      throw new Error(error.message || 'Failed to connect wallet');
    } finally {
      this.isConnecting = false;
    }
  }

  async signMessage(message: string): Promise<string> {
    if (!this.signer) {
      throw new Error('No signer available. Please connect wallet first.');
    }

    try {
      const signature = await this.signer.signMessage(message);
      return signature;
    } catch (error: any) {
      console.error('Error signing message:', error);
      
      if (error.code === 4001) {
        throw new Error('Signature request rejected by user');
      }
      
      throw new Error(error.message || 'Failed to sign message');
    }
  }

  disconnect() {
    this.provider = null;
    this.contract = null;
    this.signer = null;
  }

  async getContract() {
    if (!this.contract || !this.signer) {
      throw new Error('Wallet not connected. Please connect wallet first.');
    }
    return this.contract;
  }

  async getCurrentAccount(): Promise<string | null> {
    if (!this.provider) {
      if (typeof window !== 'undefined' && window.ethereum) {
        try {
          this.provider = new ethers.BrowserProvider(window.ethereum);
          const accounts = await this.provider.send('eth_accounts', []);
          if (accounts.length > 0) {
            this.signer = await this.provider.getSigner();
            this.contract = new ethers.Contract(CONTRACT_ADDRESS, EVENT_CHAIN_ABI, this.signer);
            return accounts[0];
          }
        } catch (error) {
          console.error('Error reconnecting:', error);
        }
      }
      return null;
    }
    
    try {
      const signer = await this.provider.getSigner();
      return signer.address;
    } catch {
      return null;
    }
  }

  async buyTickets(
    eventId: number, 
    typeId: number, 
    quantity: number, 
    beneficiaries: string[],
    percentages: number[],
    totalPrice: string
  ) {
    const contract = await this.getContract();
    const totalCost = ethers.parseEther(totalPrice);
    
    const tx = await contract.buyTickets(
      eventId, 
      typeId, 
      quantity,
      beneficiaries,
      percentages,
      { value: totalCost }
    );
    
    const receipt = await tx.wait();
    return {
      txHash: receipt.hash,
      blockNumber: receipt.blockNumber,
      ticketIds: receipt.logs
        .filter((log: any) => log.topics[0] === ethers.id('TicketMinted(uint256,uint256,uint256,address,uint256)'))
        .map((log: any) => Number(ethers.getBigInt(log.topics[1])))
    };
  }

  async listTicketForResale(ticketId: number, resalePrice: string, resaleDeadline: number) {
    const contract = await this.getContract();
    const priceInWei = ethers.parseEther(resalePrice);
    
    const tx = await contract.listTicketForResale(ticketId, priceInWei, resaleDeadline);
    const receipt = await tx.wait();
    
    return {
      txHash: receipt.hash,
      blockNumber: receipt.blockNumber
    };
  }

  async buyResaleTicket(ticketId: number, price: string) {
    const contract = await this.getContract();
    const priceInWei = ethers.parseEther(price);
    
    const tx = await contract.buyResaleTicket(ticketId, {
      value: priceInWei
    });
    
    const receipt = await tx.wait();
    return {
      txHash: receipt.hash,
      blockNumber: receipt.blockNumber
    };
  }

  async getUserTickets(address: string): Promise<number[]> {
    const contract = await this.getContract();
    const ticketIds = await contract.getUserTickets(address);
    return ticketIds.map((id: bigint) => Number(id));
  }

  async getTicketDetails(ticketId: number) {
    const contract = await this.getContract();
    const ticket = await contract.getTicketDetails(ticketId);
    
    return {
      ticketId: Number(ticket.ticketId),
      eventId: Number(ticket.eventId),
      typeId: Number(ticket.typeId),
      currentOwner: ticket.currentOwner,
      originalPrice: ethers.formatEther(ticket.originalPrice),
      isUsed: ticket.isUsed,
      mintedAt: Number(ticket.mintedAt),
      usedAt: Number(ticket.usedAt),
      isForResale: ticket.isForResale,
      resalePrice: ethers.formatEther(ticket.resalePrice),
      resaleDeadline: Number(ticket.resaleDeadline),
      resaleCount: Number(ticket.resaleCount)
    };
  }

  async canResell(ticketId: number): Promise<boolean> {
    const contract = await this.getContract();
    return await contract.canResell(ticketId);
  }

  async getMaxResalePrice(ticketId: number): Promise<string> {
    const contract = await this.getContract();
    const maxPrice = await contract.getMaxResalePrice(ticketId);
    return ethers.formatEther(maxPrice);
  }
}

export const blockchainService = new BlockchainService();

declare global {
  interface Window {
    ethereum?: any;
  }
}const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api';

export enum Role {
  ADMIN = 'ADMIN',
  EO = 'EO',
  USER = 'USER'
}

export enum EventStatus {
  PENDING = 'PENDING',
  APPROVED = 'APPROVED',
  ACTIVE = 'ACTIVE',
  ENDED = 'ENDED',
  CANCELLED = 'CANCELLED'
}

export enum ProposalStatus {
  PENDING = 'PENDING',
  APPROVED = 'APPROVED',
  REJECTED = 'REJECTED'
}

export enum TransactionType {
  PURCHASE = 'PURCHASE',
  RESALE_BUY = 'RESALE_BUY',
  USE = 'USE'
}

export interface User {
  id: string;
  username?: string;
  email?: string;
  walletAddress?: string;
  role: Role;
  createdAt?: string;
  updatedAt?: string;
}

export interface AuthResponse {
  token: string;
  user: User;
}

export interface NonceResponse {
  message: string;
  nonce: number;
  timestamp: number;
}

export interface Event {
  id: string;
  eventId: number;
  name: string;
  description: string;
  location: string;
  date: string;
  posterUrl?: string;
  status: EventStatus;
  creatorId: string;
  creator?: User;
  createdAt: string;
  updatedAt: string;
  ticketTypes?: TicketType[];
  proposals?: Proposal[];
  tickets?: Ticket[];
}

export interface TicketType {
  id: string;
  typeId: number;
  eventId: string;
  event?: Event;
  name: string;
  description?: string;
  price: string;
  stock: number;
  sold: number;
  saleStartDate: string;
  saleEndDate: string;
  benefits?: any;
  active: boolean;
  createdAt: string;
  updatedAt: string;
  tickets?: Ticket[];
}

export interface Proposal {
  id: string;
  eventId: string;
  event?: Event;
  creatorId: string;
  creator?: User;
  revenueBeneficiaries: Array<{
    address: string;
    name?: string;
    percentage: number;
  }>;
  taxWalletAddress: string;
  status: ProposalStatus;
  adminComment?: string;
  submittedAt: string;
  reviewedAt?: string;
}

export interface Ticket {
  id: string;
  ticketId: number;
  eventId: string;
  event?: Event;
  typeId: string;
  ticketType?: TicketType;
  ownerId: string;
  owner?: User;
  txHash: string;
  blockNumber: number;
  originalPrice: string;
  isUsed: boolean;
  isForResale: boolean;
  resalePrice?: string;
  resaleDeadline?: string;
  resaleCount: number;
  qrCode: string;
  tokenURI?: string;
  mintedAt: string;
  usedAt?: string;
  createdAt: string;
  updatedAt: string;
  transactions?: Transaction[];
}

export interface Transaction {
  id: string;
  txHash: string;
  userId: string;
  user?: User;
  type: TransactionType;
  from: string;
  to?: string;
  amount: string;
  eventId?: string;
  event?: Event;
  ticketId?: string;
  ticket?: Ticket;
  blockNumber: number;
  timestamp: string;
  createdAt: string;
}

export interface AdminStats {
  totalEvents: number;
  activeEvents: number;
  totalTicketsSold: number;
  totalRevenue: string;
  recentTransactions: Transaction[];
}

class ApiClient {
  private baseUrl: string;
  private token: string | null = null;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
    if (typeof window !== 'undefined') {
      this.token = localStorage.getItem('auth_token');
    }
  }

  setToken(token: string) {
    this.token = token;
    if (typeof window !== 'undefined') {
      localStorage.setItem('auth_token', token);
    }
  }

  clearToken() {
    this.token = null;
    if (typeof window !== 'undefined') {
      localStorage.removeItem('auth_token');
    }
  }

  getToken(): string | null {
    return this.token;
  }

  private async request<T>(
    endpoint: string,
    options?: RequestInit
  ): Promise<T> {
    try {
      const url = `${this.baseUrl}${endpoint}`;
      
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        ...(this.token ? { 'Authorization': `Bearer ${this.token}` } : {}),
        ...(options?.headers as Record<string, string>),
      };

      const response = await fetch(url, {
        ...options,
        headers,
        credentials: 'include',
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || `HTTP error! status: ${response.status}`);
      }

      return (data.data !== undefined ? data.data : data) as T;
    } catch (error) {
      console.error('API Request failed:', error);
      throw error;
    }
  }

  async register(
    username: string, 
    email: string, 
    password: string, 
    role: string = 'USER'
  ): Promise<AuthResponse> {
    return this.request<AuthResponse>('/auth/register', {
      method: 'POST',
      body: JSON.stringify({ username, email, password, role })
    });
  }

  async login(email: string, password: string): Promise<AuthResponse> {
    const response = await this.request<AuthResponse>('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password }),
    });
    
    if (response.token) {
      this.setToken(response.token);
    }
    
    return response;
  }

  async getWalletNonce(address: string): Promise<NonceResponse> {
    return this.request<NonceResponse>(`/auth/wallet-nonce/${address}`);
  }

  async connectWallet(walletAddress: string, signature: string, message: string): Promise<{ user: User }> {
    return this.request('/auth/connect-wallet', {
      method: 'POST',
      body: JSON.stringify({ walletAddress, signature, message }),
    });
  }

  async disconnectWallet(): Promise<void> {
    await this.request('/auth/disconnect-wallet', {
      method: 'POST',
    });
  }

  async logout(): Promise<void> {
    try {
      await this.request('/auth/logout', {
        method: 'POST',
      });
    } finally {
      this.clearToken();
    }
  }

  async verifyToken(): Promise<{ user: User }> {
    return this.request('/auth/verify');
  }

  async checkAdmin(address: string): Promise<{ isAdmin: boolean }> {
    return this.request(`/auth/admin-check/${address}`);
  }

  async getEvents(filters?: {
    status?: string;
    location?: string;
    search?: string;
    sortBy?: string;
    order?: string;
  }): Promise<Event[]> {
    const params = new URLSearchParams(filters as any);
    return this.request<Event[]>(`/events?${params}`);
  }

  async getEventById(eventId: string): Promise<Event> {
    return this.request<Event>(`/events/${eventId}`);
  }

  async getEventStatistics(eventId: string) {
    return this.request(`/events/${eventId}/statistics`);
  }

  async getUserTickets(address: string, filters?: {
    status?: string;
    eventId?: string;
  }): Promise<Ticket[]> {
    const params = new URLSearchParams(filters as any);
    return this.request<Ticket[]>(`/tickets/user/${address}?${params}`);
  }

  async getTicketById(ticketId: number): Promise<Ticket> {
    return this.request<Ticket>(`/tickets/${ticketId}`);
  }

  async getUserTransactionHistory(address: string, filters?: {
    type?: string;
    eventId?: string;
  }): Promise<Transaction[]> {
    const params = new URLSearchParams(filters as any);
    return this.request<Transaction[]>(`/users/${address}/transactions?${params}`);
  }

  async getPendingProposals(): Promise<Proposal[]> {
    return this.request<Proposal[]>('/admin/proposals/pending');
  }

  async approveProposal(proposalId: string, data: {
    taxWalletAddress?: string;
    adminComment?: string;
  }): Promise<any> {
    return this.request(`/admin/proposals/${proposalId}/approve`, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async rejectProposal(proposalId: string, adminComment: string): Promise<any> {
    return this.request(`/admin/proposals/${proposalId}/reject`, {
      method: 'POST',
      body: JSON.stringify({ adminComment }),
    });
  }

  async getAdminStats(): Promise<AdminStats> {
    return this.request<AdminStats>('/admin/stats');
  }

  async getEventOrganizers(): Promise<any[]> {
    return this.request<any[]>('/admin/eos');
  }

  async addAdmin(address: string): Promise<any> {
    return this.request('/admin/add', {
      method: 'POST',
      body: JSON.stringify({ address }),
    });
  }

  async verifyAdmin(address: string): Promise<{ isAdmin: boolean }> {
    return this.request<{ isAdmin: boolean }>(`/admin/verify/${address}`);
  }

  async createEvent(data: {
    name: string;
    description: string;
    location: string;
    date: string;
    posterUrl?: string;
    creatorAddress: string;
    revenueBeneficiaries?: Array<{
      address: string;
      name?: string;
      percentage: number;
    }>;
    taxWalletAddress?: string;
  }): Promise<{ event: Event; proposal: Proposal }> {
    return this.request('/eo/events', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async getEOEvents(address: string): Promise<Event[]> {
    return this.request<Event[]>(`/eo/events/${address}`);
  }

  async updateEvent(eventId: string, data: {
    description?: string;
    location?: string;
    posterUrl?: string;
  }): Promise<Event> {
    return this.request<Event>(`/eo/events/${eventId}`, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async addTicketType(eventId: string, data: {
    name: string;
    description?: string;
    price: string;
    stock: number;
    saleStartDate: string;
    saleEndDate: string;
    benefits?: any;
  }): Promise<TicketType> {
    return this.request<TicketType>(`/eo/events/${eventId}/ticket-types`, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updateTicketType(typeId: string, data: {
    price?: string;
    stock?: number;
    saleStartDate?: string;
    saleEndDate?: string;
    benefits?: any;
  }): Promise<TicketType> {
    return this.request<TicketType>(`/eo/ticket-types/${typeId}`, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async getEventRevenue(eventId: string): Promise<any> {
    return this.request(`/eo/events/${eventId}/revenue`);
  }

  async getEventAnalytics(eventId: string): Promise<any> {
    return this.request(`/eo/events/${eventId}/analytics`);
  }

  async getDashboardStats(address: string): Promise<any> {
    return this.request(`/eo/dashboard/${address}`);
  }

  async verifyTicket(ticketId: number, scannerAddress?: string): Promise<any> {
    return this.request(`/eo/tickets/${ticketId}/verify`, {
      method: 'POST',
      body: JSON.stringify({ scannerAddress }),
    });
  }

  async useTicket(ticketId: number, data: {
    eventCreatorAddress: string;
    scannerAddress: string;
  }): Promise<any> {
    return this.request(`/eo/tickets/${ticketId}/use`, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }
}

export const apiClient = new ApiClient(API_BASE_URL);