::::::::::::::
app/events/loading.tsx
::::::::::::::
export default function Loading() {
  return null
}
::::::::::::::
app/events/page.tsx
::::::::::::::
"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import Link from "next/link"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Search, MapPin, Calendar, ChevronLeft, ChevronRight } from "lucide-react"
import { allEvents, featuredEvents } from "@/lib/events-data"

const categories = ["Semua", "Musik", "Seni & Pameran", "Olahraga"]

export default function EventsPage() {
  const [currentBannerIndex, setCurrentBannerIndex] = useState(0)
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("Semua")
  const [selectedTimeFilter, setSelectedTimeFilter] = useState("Semua")
  const [progress, setProgress] = useState(0)

  useEffect(() => {
    setProgress(0)
    const progressInterval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) return 100
        return prev + 100 / 50 // 5000ms / 100ms = 50 steps
      })
    }, 100)
    return () => clearInterval(progressInterval)
  }, [currentBannerIndex])

  useEffect(() => {
    const interval = setInterval(() => {
      const nextIndex = (currentBannerIndex + 1) % featuredEvents.length
      setIsTransitioning(true)
      setTimeout(() => {
        setCurrentBannerIndex(nextIndex)
        setIsTransitioning(false)
      }, 300)
    }, 5000)
    return () => clearInterval(interval)
  }, [currentBannerIndex])

  const handlePrevBanner = () => {
    const nextIndex = (currentBannerIndex - 1 + featuredEvents.length) % featuredEvents.length
    setIsTransitioning(true)
    setTimeout(() => {
      setCurrentBannerIndex(nextIndex)
      setIsTransitioning(false)
    }, 600)
  }

  const handleNextBanner = () => {
    const nextIndex = (currentBannerIndex + 1) % featuredEvents.length
    setIsTransitioning(true)
    setTimeout(() => {
      setCurrentBannerIndex(nextIndex)
      setIsTransitioning(false)
    }, 600)
  }

  // Helper function to parse Indonesian date format
  const parseIndonesianDate = (dateString: string): Date => {
    const monthMap: Record<string, number> = {
      Januari: 0,
      Februari: 1,
      Maret: 2,
      April: 3,
      Mei: 4,
      Juni: 5,
      Juli: 6,
      Agustus: 7,
      September: 8,
      Oktober: 9,
      November: 10,
      Desember: 11,
    }

    const parts = dateString.split(" ")
    const day = parseInt(parts[0])
    const month = monthMap[parts[1]]
    const year = parseInt(parts[2])

    return new Date(year, month, day)
  }

  const filterEventsByTime = (event: typeof allEvents[0]) => {
    const eventDate = parseIndonesianDate(event.date)
    const today = new Date()
    today.setHours(0, 0, 0, 0) // Reset time to start of day

    if (selectedTimeFilter === "Seminggu ke Depan") {
      const oneWeekFromNow = new Date(today)
      oneWeekFromNow.setDate(today.getDate() + 7)
      return eventDate >= today && eventDate <= oneWeekFromNow
    } else if (selectedTimeFilter === "Sebulan ke Depan") {
      const oneMonthFromNow = new Date(today)
      oneMonthFromNow.setMonth(today.getMonth() + 1)
      return eventDate >= today && eventDate <= oneMonthFromNow
    }
    // "Semua" filter
    return true
  }

  const filteredEvents = allEvents.filter((event) => {
    const matchesSearch = event.name.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesCategory = selectedCategory === "Semua" || event.category === selectedCategory
    const matchesTime = filterEventsByTime(event)
    return matchesSearch && matchesCategory && matchesTime
  })

  const currentFeaturedEvent = featuredEvents[currentBannerIndex]

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#000000] via-[#000a1a] to-[#000000]">
      <div className="relative h-[400px] m-4 sm:m-6 md:m-8 my-4 overflow-visible rounded-2xl bg-black">
        {/* Background image */}
        <div className={`transition-opacity duration-300 ${isTransitioning ? "opacity-0" : "opacity-100"}`}>
          <Image
            src={currentFeaturedEvent.banner || "/placeholder.svg"}
            alt="Banner background"
            fill
            className="object-cover rounded-2xl"
          />
        </div>
        <div className="absolute inset-0 bg-gradient-to-b from-black/20 via-black/20 via-80% to-black/30 rounded-2xl" />
        <div
          className={`absolute inset-0 flex items-center justify-start transition-opacity duration-300 ${isTransitioning ? "opacity-0" : "opacity-100"}`}
        >
          <div className="text-center text-white px-4 sm:px-8 md:px-12 lg:px-24 flex flex-col sm:flex-row gap-4 sm:gap-6 w-full">
            <div className="mb-4 sm:mb-6 flex justify-center sm:justify-start">
              <div className="relative h-20 w-20 sm:h-28 sm:w-28 md:h-32 md:w-32 rounded-lg overflow-hidden shadow-2xl">
                <Image
                  src={currentFeaturedEvent.logo || "/placeholder.svg"}
                  alt={currentFeaturedEvent.name}
                  fill
                  className="object-cover"
                />
              </div>
            </div>

            <div className="items-start text-center sm:text-left sm:ml-0 md:ml-6 flex-1">
              <h1 className="text-xl sm:text-2xl md:text-3xl font-heading mb-2 sm:mb-3 md:mb-4">{currentFeaturedEvent.name}</h1>
              <div className="mb-2 sm:mb-3 md:mb-4">
                <p className="text-sm sm:text-base md:text-lg font-subheading font-semibold">{currentFeaturedEvent.featuring.join(", ")}</p>
              </div>
              <div className="glass-fx inline-flex flex-col sm:flex-row items-center gap-2 sm:gap-4 md:gap-6 text-xs sm:text-sm font-subheading font-semibold w-auto px-3 py-2">
                <div className="flex items-center gap-2">
                  <MapPin className="h-3 w-3 sm:h-4 sm:w-4" />
                  <span>{currentFeaturedEvent.location}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Calendar className="h-3 w-3 sm:h-4 sm:w-4" />
                  <span>{currentFeaturedEvent.date}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Navigation Buttons */}
        <button
          onClick={handlePrevBanner}
          className="glass-fx absolute left-2 sm:left-4 top-1/2 -translate-y-1/2 p-2 sm:p-3 rounded-full hover:bg-white/30 transition-all"
          aria-label="Previous banner"
        >
          <ChevronLeft className="h-5 w-5 sm:h-6 sm:w-6 text-white" />
        </button>
        <button
          onClick={handleNextBanner}
          className="glass-fx absolute right-2 sm:right-4 top-1/2 -translate-y-1/2 p-2 sm:p-3 rounded-full hover:bg-white/30 transition-all"
          aria-label="Next banner"
        >
          <ChevronRight className="h-5 w-5 sm:h-6 sm:w-6 text-white" />
        </button>

        <div className="absolute bottom-16 sm:bottom-20 left-1/2 -translate-x-1/2 w-full max-w-xs sm:max-w-md md:max-w-2xl px-4 sm:px-8">
          <div className="flex gap-1.5 sm:gap-2">
            {featuredEvents.map((_, index) => (
              <div key={index} className="flex-1 h-1 bg-white/20 rounded-full overflow-hidden">
                <div
                  className="h-full bg-white rounded-full transition-all duration-100 ease-linear"
                  style={{
                    width:
                      index < currentBannerIndex
                        ? "100%" // Completed slides
                        : index === currentBannerIndex
                          ? `${progress}%` // Current slide with progress
                          : "0%", // Upcoming slides
                  }}
                />
              </div>
            ))}
          </div>
        </div>

        {/* Search Bar Overlay */}
        <div className="absolute -bottom-6 left-1/2 -translate-x-1/2 w-full max-w-xs sm:max-w-md md:max-w-2xl px-4 sm:px-8">
          <div className="clear-glass-fx bg-black/60 p-1.5 sm:p-2">
            <div className="relative">
              <Search className="absolute left-2 sm:left-3 top-1/2 -translate-y-1/2 h-4 w-4 sm:h-5 sm:w-5 text-white/70" />
              <Input
                type="text"
                placeholder="Cari acara..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-8 sm:pl-10 h-10 sm:h-12 text-sm sm:text-base bg-transparent border-none text-white placeholder:text-white/60 focus-visible:ring-0 focus-visible:ring-offset-0"
              />
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        <div className="mb-6 flex flex-col sm:flex-row justify-between items-stretch sm:items-center gap-3 sm:gap-4">
          {/* Time Filter Buttons - Left */}
          <div className="inline-flex items-center gap-1 bg-gray-900/60 backdrop-blur-md border border-white/10 p-1.5 rounded-full w-full sm:w-auto justify-center">
            {["Semua", "Seminggu ke Depan", "Sebulan ke Depan"].map((timeFilter) => {
              const isActive = selectedTimeFilter === timeFilter
              return (
                <Button
                  key={timeFilter}
                  variant="ghost"
                  onClick={() => setSelectedTimeFilter(timeFilter)}
                  className={`relative rounded-full px-3 sm:px-4 py-1.5 text-xs sm:text-sm font-medium transition-all duration-300 flex-1 sm:flex-initial
                    ${
                      isActive
                        ? "text-white shadow-md bg-gradient-to-b from-gray-400 via-gray-600 to-gray-700"
                        : "text-gray-300 hover:text-white hover:bg-white/10"
                    }`}
                >
                  {timeFilter}
                </Button>
              )
            })}
          </div>

          {/* Category Dropdown - Right */}
          <div className="relative w-full sm:w-fit">
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="h-10 px-4 sm:px-5 pr-10 rounded-full bg-gradient-to-b from-gray-300/60 via-gray-500/60 to-gray-700/60 border border-none text-white text-sm sm:text-base font-medium backdrop-blur-md cursor-pointer appearance-none transition-all duration-200 focus:ring-2 focus:ring-white/30 hover:from-gray-200/70 hover:to-gray-600/70 w-full sm:w-auto"
            >
              {categories.map((category) => (
                <option key={category} value={category} className="bg-gray-800 text-white">
                  {category}
                </option>
              ))}
            </select>

            {/* Custom caret icon */}
            <div className="absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none">
              <svg className="h-4 w-4 text-white/80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-5 md:gap-6">
          {filteredEvents.map((event) => (
            <Link key={event.id} href={`/events/${event.id}`}>
              <Card className="group overflow-hidden pb-0 border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all duration-300 hover:shadow-2xl hover:shadow-white/5 cursor-pointer hover:-translate-y-1">
                <div className="relative h-40 sm:h-44 md:h-48 w-full overflow-hidden">
                  <Image
                    src={event.logo || "/placeholder.svg"}
                    alt={event.name}
                    fill
                    className="object-cover transition-transform duration-500 group-hover:scale-110"
                  />
                  {/* Gradient overlay for better text contrast */}
                  <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-60 group-hover:opacity-40 transition-opacity duration-300" />

                  {/* Category badge positioned on image */}
                  <div className="absolute top-2 sm:top-3 right-2 sm:right-3">
                    <Badge className="glass-fx text-white border-white/30 font-subheading font-semibold text-xs px-2 sm:px-3 py-0.5 sm:py-1">
                      {event.category}
                    </Badge>
                  </div>
                </div>

                <CardContent className="p-4 sm:p-5 space-y-2 sm:space-y-3">
                  <h3 className="font-subheading font-semibold text-base sm:text-lg text-white leading-tight line-clamp-2 group-hover:text-gray-100 transition-colors">
                    {event.name}
                  </h3>

                  <div className="space-y-2 sm:space-y-2.5 text-xs sm:text-sm">
                    <div className="flex items-center gap-2 sm:gap-2.5 text-gray-300 group-hover:text-white transition-colors">
                      <div className="flex items-center justify-center w-7 h-7 sm:w-8 sm:h-8 rounded-full bg-white/5 border border-white/10 group-hover:bg-white/10 transition-colors shrink-0">
                        <MapPin className="h-3.5 w-3.5 sm:h-4 sm:w-4" />
                      </div>
                      <span className="font-subheading font-medium truncate">{event.location}</span>
                    </div>

                    <div className="flex items-center gap-2 sm:gap-2.5 text-gray-300 group-hover:text-white transition-colors">
                      <div className="flex items-center justify-center w-7 h-7 sm:w-8 sm:h-8 rounded-full bg-white/5 border border-white/10 group-hover:bg-white/10 transition-colors shrink-0">
                        <Calendar className="h-3.5 w-3.5 sm:h-4 sm:w-4" />
                      </div>
                      <span className="font-subheading font-medium">{event.date}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </Link>
          ))}
        </div>

        {filteredEvents.length === 0 && (
          <div className="text-center py-12">
            <p className="text-muted-foreground text-sm sm:text-base md:text-lg">Tidak ada acara yang sesuai dengan kriteria Anda.</p>
          </div>
        )}
      </div>
    </div>
  )
}
::::::::::::::
app/explore-tickets/loading.tsx
::::::::::::::
export default function Loading() {
  return null
}
::::::::::::::
app/explore-tickets/page.tsx
::::::::::::::
"use client"

import { useState, type FormEvent } from "react"
import { useRouter } from "next/navigation"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Search, Shuffle } from "lucide-react"

export default function ExploreTicketsPage() {
  const [ticketId, setTicketId] = useState("")
  const router = useRouter()

  const handleSearch = (e: FormEvent) => {
    e.preventDefault()
    if (ticketId.trim()) {
      router.push(`/tickets/${ticketId.trim()}`)
    }
  }

  const handleRandomTicket = () => {
    // Generate a random ticket ID for demonstration
    // In production, this would fetch a real recently issued ticket ID from your backend
    const randomId = Math.floor(Math.random() * 10000).toString()
    router.push(`/tickets/${randomId}`)
  }

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-[#0a0a0a] via-[#1a0a2e] to-[#0a0a0a]">
      {/* Ambient animated background */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 -left-1/2 w-full h-full bg-gradient-radial from-purple-500/10 to-transparent animate-pulse-slow" />
        <div className="absolute -bottom-1/2 -right-1/2 w-full h-full bg-gradient-radial from-purple-400/8 to-transparent animate-pulse-slow animation-delay-2000" />
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-purple-500/5 rounded-full blur-3xl animate-float" />
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-400/5 rounded-full blur-3xl animate-float animation-delay-4000" />
      </div>

      {/* Content */}
      <div className="relative z-10 flex flex-col items-center justify-center min-h-screen px-4 py-16 mt-16">
        <div className="max-w-4xl w-full space-y-12 text-center">
          {/* Header */}
          <div className="space-y-6">
            <h1 className="font-heading text-5xl md:text-7xl text-white tracking-tight">Jelajahi Tiket</h1>
            <p className="font-body text-xl md:text-2xl text-gray-300 leading-relaxed max-w-3xl mx-auto">
              Jadilah saksi <span className="font-bold text-white">#RevolusiTiketing</span> secara langsung. Tiketing NFT
              menghadirkan manfaat blockchain untuk audiens global. Jelajahi Ekosistem Tiketing Terbuka yang lengkap: dari
              statistik real-time hingga siklus hidup lengkap dan verifikasi keaslian tiket individual.
            </p>
          </div>

          {/* Search Bar */}
          <div className="max-w-2xl mx-auto">
            <form onSubmit={handleSearch} className="relative">
              <div className="glass-fx bg-black/40 p-2 rounded-2xl">
                <div className="flex gap-2">
                  <div className="relative flex-1">
                    <Search className="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                    <Input
                      type="text"
                      placeholder="Masukkan identifier Tiket NFT..."
                      value={ticketId}
                      onChange={(e) => setTicketId(e.target.value)}
                      className="pl-12 pr-4 py-6 text-lg bg-black/50 border-white/10 text-white placeholder:text-gray-500 focus:bg-black/60 focus:border-purple-500/30 transition-all"
                    />
                  </div>
                  <Button
                    type="submit"
                    size="lg"
                    className="px-8 py-6 bg-gradient-to-r from-purple-600/80 to-purple-500/80 hover:from-purple-600 hover:to-purple-500 text-white font-semibold shadow-lg shadow-purple-500/20 transition-all"
                  >
                    Cari
                  </Button>
                </div>
              </div>
            </form>
          </div>

          {/* Random Button Section */}
          <div className="space-y-4">
            <p className="font-body text-lg text-gray-400">
              Tidak punya identifier tiket? Temukan tiket NFT yang baru diterbitkan dan jelajahi perjalanan lengkapnya
              dari pembuatan hingga status saat ini.
            </p>
            <Button
              onClick={handleRandomTicket}
              size="lg"
              variant="outline"
              className="px-8 py-6 bg-black/40 border-2 border-white/20 hover:bg-black/60 hover:border-purple-500/50 text-white hover:text-purple-500 font-semibold backdrop-blur-sm transition-all group"
            >
              <Shuffle className="w-5 h-5 mr-2 group-hover:rotate-180 transition-transform duration-500" />
              Lihat Tiket Acak
            </Button>
          </div>

          {/* Feature Cards */}
          <div className="grid md:grid-cols-3 gap-6 mt-16">
            <div className="clear-glass-fx bg-black/40 p-6 rounded-xl space-y-3 border border-white/10">
              <div className="w-16 h-16 rounded-lg flex items-center justify-center mx-auto">
                <Image
                  src="/images/explore-tickets/illustration-1.png"
                  alt="Blockchain Verification"
                  width={64}
                  height={64}
                  className="object-contain"
                />
              </div>
              <h3 className="font-subheading text-xl font-semibold text-white">Terverifikasi Blockchain</h3>
              <p className="font-body text-gray-400 text-sm leading-relaxed">
                Setiap tiket diamankan secara kriptografi dan dapat diverifikasi di blockchain
              </p>
            </div>
            <div className="clear-glass-fx bg-black/40 p-6 rounded-xl space-y-3 border border-white/10">
              <div className="w-16 h-16 rounded-lg flex items-center justify-center mx-auto">
                <Image
                  src="/images/explore-tickets/illustration-3.png"
                  alt="Real-Time Tracking"
                  width={64}
                  height={64}
                  className="object-contain"
                />
              </div>
              <h3 className="font-subheading text-xl font-semibold text-white">Pelacakan Real-Time</h3>
              <p className="font-body text-gray-400 text-sm leading-relaxed">
                Pantau peristiwa siklus hidup tiket dan transfer kepemilikan secara real-time
              </p>
            </div>
            <div className="clear-glass-fx bg-black/40 p-6 rounded-xl space-y-3 border border-white/10">
              <div className="w-16 h-16 rounded-lg flex items-center justify-center mx-auto">
                <Image
                  src="/images/explore-tickets/illustration-2.png"
                  alt="Guaranteed Authenticity"
                  width={64}
                  height={64}
                  className="object-contain"
                />
              </div>
              <h3 className="font-subheading text-xl font-semibold text-white">Keaslian Terjamin</h3>
              <p className="font-body text-gray-400 text-sm leading-relaxed">
                Hilangkan penipuan dengan bukti keaslian dan kepemilikan tiket yang tidak dapat diubah
              </p>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes pulse-slow {
          0%, 100% { opacity: 0.3; }
          50% { opacity: 0.6; }
        }
        @keyframes float {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-20px); }
        }
        .animate-pulse-slow {
          animation: pulse-slow 8s ease-in-out infinite;
        }
        .animate-float {
          animation: float 6s ease-in-out infinite;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
        .bg-gradient-radial {
          background: radial-gradient(circle, var(--tw-gradient-stops));
        }
      `}</style>
    </div>
  )
}
::::::::::::::
app/login/page.tsx
::::::::::::::
"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { apiClient } from "@/lib/api"
import { Loader2 } from "lucide-react"

export default function LoginPage() {
  const router = useRouter()
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [rememberMe, setRememberMe] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError(null)

    try {
      const response = await apiClient.login(email, password)
      
      if (response.token) {
        apiClient.setToken(response.token)
        
        if (response.user.role === 'ADMIN') {
          router.push('/admin/dashboard')
        } else if (response.user.role === 'EO') {
          router.push('/eo/dashboard')
        } else {
          router.push('/events')
        }
      }
    } catch (err: any) {
      console.error('Login error:', err)
      setError(err.message || 'Login failed. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-[#0a0a0a] via-[#1a0a2e] to-[#0a0a0a]">
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 -left-1/2 h-[200%] w-[200%] animate-spin-slow bg-gradient-to-r from-purple-500/10 via-transparent to-blue-500/10" />
        <div className="absolute top-1/4 right-1/4 h-96 w-96 animate-pulse rounded-full bg-purple-500/5 blur-3xl" />
        <div className="absolute bottom-1/4 left-1/4 h-96 w-96 animate-pulse rounded-full bg-blue-500/5 blur-3xl" />
      </div>

      <div className="relative z-10 flex min-h-screen items-center justify-center px-4 py-12">
        <div className="w-full max-w-md">
          <div className="glass-fx p-8">
            <div className="mb-8 text-center">
              <div className="mb-6 flex justify-center">
                <Image src="/images/app-logo.png" alt="App Logo" width={400} height={80} className="h-auto w-100" />
              </div>
              <h1 className="font-heading mb-2 text-4xl text-white">Welcome Back</h1>
              <p className="font-body text-white/60">Sign in to access your tickets</p>
            </div>

            {error && (
              <div className="mb-6 p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
                <p className="text-red-400 font-body text-sm">{error}</p>
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email" className="font-body text-sm font-medium text-white/90">
                  Email Address
                </Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="you@example.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="password" className="font-body text-sm font-medium text-white/90">
                  Password
                </Label>
                <Input
                  id="password"
                  type="password"
                  placeholder="••••••••"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="remember"
                    checked={rememberMe}
                    onCheckedChange={(checked) => setRememberMe(checked as boolean)}
                    disabled={isLoading}
                    className="border-white/20 data-[state=checked]:bg-purple-500 data-[state=checked]:border-purple-500"
                  />
                  <Label htmlFor="remember" className="font-body text-sm text-white/70 cursor-pointer">
                    Remember me
                  </Label>
                </div>
                <Link href="#" className="font-body text-sm text-purple-400 hover:text-purple-300 transition-colors">
                  Forgot password?
                </Link>
              </div>

              <Button
                type="submit"
                disabled={isLoading}
                className="font-body w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 transition-all duration-300 shadow-lg shadow-purple-500/20"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Signing in...
                  </>
                ) : (
                  'Sign In'
                )}
              </Button>
            </form>

            <p className="font-body mt-6 text-center text-sm text-white/60">
              Don&apos;t have an account?{" "}
              <Link href="/register" className="text-purple-400 hover:text-purple-300 transition-colors">
                Sign up
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}::::::::::::::
app/profile/page.tsx
::::::::::::::
"use client"

import { useState, useEffect, Suspense } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import Image from "next/image"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Wallet, ArrowUpRight, ArrowDownLeft, Plus, ExternalLink, Ticket } from "lucide-react"

type Tab = "my-tickets" | "wallet-info"

// Mock wallet data
const connectedWallets = [
  {
    id: 1,
    name: "MetaMask",
    address: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb",
    balance: "2.45 ETH",
    balanceUSD: "$4,890.00",
    type: "Ethereum",
    isDefault: true,
  },
  {
    id: 2,
    name: "Phantom",
    address: "9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin",
    balance: "125.30 SOL",
    balanceUSD: "$2,506.00",
    type: "Solana",
    isDefault: false,
  },
  {
    id: 3,
    name: "Coinbase Wallet",
    address: "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
    balance: "0.15 BTC",
    balanceUSD: "$6,450.00",
    type: "Bitcoin",
    isDefault: false,
  },
]

// Mock transaction history
const transactions = [
  {
    id: 1,
    type: "purchase",
    description: "Neon Waves Festival - VIP Ticket",
    amount: "-0.25 ETH",
    amountUSD: "-$500.00",
    date: "2025-10-20",
    time: "14:32",
    status: "completed",
    wallet: "MetaMask",
  },
  {
    id: 2,
    type: "deposit",
    description: "Deposit from Bank Account",
    amount: "+1.00 ETH",
    amountUSD: "+$2,000.00",
    date: "2025-10-18",
    time: "09:15",
    status: "completed",
    wallet: "MetaMask",
  },
  {
    id: 3,
    type: "purchase",
    description: "Islands of Sound 2025 - General Admission",
    amount: "-45.00 SOL",
    amountUSD: "-$900.00",
    date: "2025-10-15",
    time: "16:45",
    status: "completed",
    wallet: "Phantom",
  },
  {
    id: 4,
    type: "sale",
    description: "Resale: Rock Concert Night - Standard",
    amount: "+0.18 ETH",
    amountUSD: "+$360.00",
    date: "2025-10-12",
    time: "11:20",
    status: "completed",
    wallet: "MetaMask",
  },
  {
    id: 5,
    type: "purchase",
    description: "Sonic Future Conference - Early Bird",
    amount: "-0.12 ETH",
    amountUSD: "-$240.00",
    date: "2025-10-10",
    time: "13:55",
    status: "completed",
    wallet: "MetaMask",
  },
  {
    id: 6,
    type: "withdrawal",
    description: "Withdrawal to Bank Account",
    amount: "-0.50 ETH",
    amountUSD: "-$1,000.00",
    date: "2025-10-08",
    time: "10:30",
    status: "pending",
    wallet: "MetaMask",
  },
]

// Mock ticket data with NFT codes and status
const myTickets = [
  {
    id: 1,
    eventName: "Neon Waves Festival",
    eventCover: "/images/example/cover-1.png",
    ticketCategory: "VIP",
    nftCode: "NFT-23A91F8C4D2E",
    purchaseDate: "2025-10-20",
    status: "active",
  },
  {
    id: 2,
    eventName: "Islands of Sound 2025",
    eventCover: "/images/example/cover-2.png",
    ticketCategory: "Regular",
    nftCode: "NFT-7B5E9A1C3F6D",
    purchaseDate: "2025-10-15",
    status: "active",
  },
  {
    id: 3,
    eventName: "Sonic Future Conference",
    eventCover: "/images/example/cover-3.png",
    ticketCategory: "VIP",
    nftCode: "NFT-4D8F2A6B9E1C",
    purchaseDate: "2025-09-28",
    status: "used",
  },
  {
    id: 4,
    eventName: "Taste & Tunes Fest",
    eventCover: "/images/example/cover-4.png",
    ticketCategory: "Regular",
    nftCode: "NFT-9C3E7F1A5B8D",
    purchaseDate: "2025-09-15",
    status: "active",
  },
  {
    id: 5,
    eventName: "Rhythm Arena 2025",
    eventCover: "/images/example/cover-5.png",
    ticketCategory: "VIP",
    nftCode: "NFT-6A2D8E4C1F9B",
    purchaseDate: "2025-08-30",
    status: "used",
  },
  {
    id: 6,
    eventName: "Rock Concert Night",
    eventCover: "/images/example/example-cover.png",
    ticketCategory: "Regular",
    nftCode: "NFT-1F7B3D9A5E2C",
    purchaseDate: "2025-08-12",
    status: "active",
  },
]

function ProfileContent() {
  const [activeTab, setActiveTab] = useState<Tab>("wallet-info")
  const router = useRouter()
  const searchParams = useSearchParams()

  useEffect(() => {
    const tab = searchParams.get("tab")
    if (tab === "my-tickets") {
      setActiveTab("my-tickets")
    }
  }, [searchParams])

  return (
    <div className="min-h-screen bg-background pt-32 pb-12 relative overflow-hidden">
      {/* Dark Magenta Ambient Background */}
      <div className="fixed inset-0 overflow-hidden opacity-70 pointer-events-none">
        <div className="absolute top-0 -left-1/3 w-2/3 h-full bg-gradient-radial from-fuchsia-700/80 to-transparent animate-pulse-slow" />
        <div className="absolute bottom-0 -right-1/3 w-2/3 h-full bg-gradient-radial from-purple-700/60 to-transparent animate-pulse-slow animation-delay-2000" />
        <div className="absolute top-1/4 -left-48 w-96 h-96 bg-fuchsia-600/40 rounded-full blur-3xl animate-float-drift" />
        <div className="absolute bottom-1/4 -right-48 w-96 h-96 bg-purple-600/40 rounded-full blur-3xl animate-float-drift animation-delay-4000" />
      </div>

      <div className="container mx-auto px-4 max-w-6xl relative z-10">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-heading text-white mb-2">Profil Saya</h1>
          <p className="text-gray-400 font-body">Kelola tiket dan informasi dompet Anda</p>
        </div>

        {/* Tab Navigation */}
        <div className="mb-8">
          <div className="inline-flex items-center gap-1 bg-gray-900/60 backdrop-blur-md border border-white/10 p-1.5 rounded-full">
            <Button
              variant="ghost"
              onClick={() => setActiveTab("wallet-info")}
              className={`relative rounded-full px-6 py-2 text-sm font-subheading font-medium transition-all duration-300
                ${
                  activeTab === "wallet-info"
                    ? "text-white shadow-md bg-gradient-to-b from-gray-400 via-gray-600 to-gray-700"
                    : "text-gray-300 hover:text-white hover:bg-white/10"
                }`}
            >
              Info Dompet
            </Button>
            <Button
              variant="ghost"
              onClick={() => setActiveTab("my-tickets")}
              className={`relative rounded-full px-6 py-2 text-sm font-subheading font-medium transition-all duration-300
                ${
                  activeTab === "my-tickets"
                    ? "text-white shadow-md bg-gradient-to-b from-gray-400 via-gray-600 to-gray-700"
                    : "text-gray-300 hover:text-white hover:bg-white/10"
                }`}
            >
              Tiket Saya
            </Button>
          </div>
        </div>

        {/* Tab Content */}
        {activeTab === "my-tickets" && (
          <div className="space-y-6">
            <div className="mb-6">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-subheading font-semibold text-white">Tiket Saya ({myTickets.length})</h2>
                <div className="flex items-center gap-2">
                  <Badge className="bg-green-500/20 text-green-400 border-green-500/30 font-subheading text-sm px-3 py-1">
                    {myTickets.filter((t) => t.status === "active").length} Aktif
                  </Badge>
                  <Badge className="bg-white/10 text-white border-white/20 font-subheading text-sm px-3 py-1">
                    {myTickets.filter((t) => t.status === "used").length} Terpakai
                  </Badge>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {myTickets.map((ticket) => (
                <Card
                  key={ticket.id}
                  onClick={() => router.push(`/tickets/${ticket.id}`)}
                  className="group overflow-hidden border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all duration-300 hover:shadow-2xl hover:shadow-white/5 cursor-pointer hover:-translate-y-1"
                >
                  {/* Event Cover Image */}
                  <div className="relative h-40 w-full overflow-hidden">
                    <Image
                      src={ticket.eventCover || "/placeholder.svg"}
                      alt={ticket.eventName}
                      fill
                      className="object-cover transition-transform duration-500 group-hover:scale-110"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent" />

                    {/* Status Badge on image */}
                    <div className="absolute top-3 right-3">
                      <Badge
                        className={`font-subheading font-semibold text-xs px-3 py-1 ${
                          ticket.status === "active"
                            ? "bg-green-500/90 text-white border-green-400/50"
                            : "bg-white/90 text-gray-900 border-white/50"
                        }`}
                      >
                        {ticket.status === "active" ? "Aktif" : "Terpakai"}
                      </Badge>
                    </div>

                    {/* Ticket icon overlay */}
                    <div className="absolute bottom-3 left-3">
                      <div className="glass-fx p-2 rounded-full">
                        <Ticket className="h-5 w-5 text-white" />
                      </div>
                    </div>
                  </div>

                  <CardContent className="p-5 space-y-3">
                    {/* Event Name */}
                    <h3 className="font-subheading font-semibold text-lg text-white leading-tight line-clamp-2 group-hover:text-gray-100 transition-colors">
                      {ticket.eventName}
                    </h3>

                    {/* Ticket Category */}
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400 font-body text-sm">Kategori</span>
                      <Badge
                        className={`font-subheading font-semibold text-xs px-3 py-1 ${
                          ticket.ticketCategory === "VIP"
                            ? "bg-purple-500/20 text-purple-300 border-purple-500/30"
                            : "bg-blue-500/20 text-blue-300 border-blue-500/30"
                        }`}
                      >
                        {ticket.ticketCategory}
                      </Badge>
                    </div>

                    {/* NFT Code */}
                    <div className="p-3 rounded-lg bg-white/5 border border-white/10">
                      <p className="text-xs text-gray-400 font-body mb-1">Kode NFT</p>
                      <p className="text-sm text-white font-mono">#{ticket.nftCode.substring(0, 13)}...</p>
                    </div>

                    {/* Purchase Date */}
                    <div className="flex items-center justify-between pt-2 border-t border-white/10">
                      <span className="text-gray-400 font-body text-xs">Dibeli</span>
                      <span className="text-white font-subheading font-medium text-sm">
                        {new Date(ticket.purchaseDate).toLocaleDateString("id-ID", {
                          day: "numeric",
                          month: "short",
                          year: "numeric",
                        })}
                      </span>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {activeTab === "wallet-info" && (
          <div className="space-y-8">
            {/* Connected Wallets Section */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-2xl font-subheading font-semibold text-white">Dompet Terhubung</h2>
                <Button className="bg-gradient-to-b from-gray-400 via-gray-600 to-gray-700 hover:from-gray-300 hover:via-gray-500 hover:to-gray-600 text-white font-subheading font-medium">
                  <Plus className="h-4 w-4 mr-2" />
                  Tambah Dompet
                </Button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {connectedWallets.map((wallet) => (
                  <Card
                    key={wallet.id}
                    className="group border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md hover:border-white/20 transition-all duration-300 hover:shadow-xl hover:shadow-white/5"
                  >
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
                            <Wallet className="h-5 w-5 text-white" />
                          </div>
                          <div>
                            <CardTitle className="text-lg font-subheading text-white">{wallet.name}</CardTitle>
                            <Badge variant="outline" className="mt-1 text-xs border-white/20 text-gray-300 font-body">
                              {wallet.type}
                            </Badge>
                          </div>
                        </div>
                        {wallet.isDefault && (
                          <Badge className="bg-green-500/20 text-green-400 border-green-500/30 text-xs font-body">
                            Utama
                          </Badge>
                        )}
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="p-3 rounded-lg bg-white/5 border border-white/10">
                        <p className="text-xs text-gray-400 font-body mb-1">Alamat</p>
                        <p className="text-sm text-white font-mono truncate">{wallet.address}</p>
                      </div>
                      <div className="flex items-end justify-between">
                        <div>
                          <p className="text-xs text-gray-400 font-body mb-1">Saldo</p>
                          <p className="text-lg font-subheading font-semibold text-white">{wallet.balance}</p>
                          <p className="text-sm text-gray-400 font-body">{wallet.balanceUSD}</p>
                        </div>
                        <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white hover:bg-white/10">
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* Transaction History Section */}
            <div>
              <h2 className="text-2xl font-subheading font-semibold text-white mb-4">Riwayat Transaksi</h2>

              <Card className="border-white/10 bg-gradient-to-br from-gray-900/80 to-gray-950/80 backdrop-blur-md">
                <CardContent className="p-0">
                  <div className="divide-y divide-white/10">
                    {transactions.map((transaction) => (
                      <div
                        key={transaction.id}
                        className="p-4 hover:bg-white/5 transition-colors duration-200 cursor-pointer"
                      >
                        <div className="flex items-center justify-between gap-4">
                          <div className="flex items-center gap-4 flex-1 min-w-0">
                            <div
                              className={`w-10 h-10 rounded-full flex items-center justify-center ${
                                transaction.type === "purchase"
                                  ? "bg-red-500/20 border border-red-500/30"
                                  : transaction.type === "deposit"
                                    ? "bg-green-500/20 border border-green-500/30"
                                    : transaction.type === "sale"
                                      ? "bg-blue-500/20 border border-blue-500/30"
                                      : "bg-yellow-500/20 border border-yellow-500/30"
                              }`}
                            >
                              {transaction.type === "purchase" || transaction.type === "withdrawal" ? (
                                <ArrowUpRight className="h-5 w-5 text-red-400" />
                              ) : (
                                <ArrowDownLeft className="h-5 w-5 text-green-400" />
                              )}
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="text-white font-subheading font-medium truncate">
                                {transaction.description}
                              </p>
                              <div className="flex items-center gap-2 mt-1">
                                <p className="text-xs text-gray-400 font-body">
                                  {transaction.date} at {transaction.time}
                                </p>
                                <span className="text-gray-600">•</span>
                                <p className="text-xs text-gray-400 font-body">{transaction.wallet}</p>
                              </div>
                            </div>
                          </div>
                          <div className="text-right">
                            <p
                              className={`text-lg font-subheading font-semibold ${
                                transaction.amount.startsWith("+") ? "text-green-400" : "text-red-400"
                              }`}
                            >
                              {transaction.amount}
                            </p>
                            <p className="text-sm text-gray-400 font-body">{transaction.amountUSD}</p>
                            <Badge
                              variant="outline"
                              className={`mt-1 text-xs font-body ${
                                transaction.status === "completed"
                                  ? "border-green-500/30 text-green-400"
                                  : "border-yellow-500/30 text-yellow-400"
                              }`}
                            >
                              {transaction.status}
                            </Badge>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}
      </div>

      {/* Custom animations */}
      <style jsx>{`
        @keyframes pulse-slow {
          0%, 100% { opacity: 0.25; }
          33% { opacity: 0.35; }
          66% { opacity: 0.45; }
        }
        @keyframes float-drift {
          0%, 100% { transform: translate(0px, 0px); opacity: 0.2; }
          25% { transform: translate(30px, -25px); opacity: 0.25; }
          50% { transform: translate(-20px, -40px); opacity: 0.3; }
          75% { transform: translate(-35px, -15px); opacity: 0.25; }
        }
        .animate-pulse-slow {
          animation: pulse-slow 12s ease-in-out infinite;
          opacity: 0.25;
        }
        .animate-float-drift {
          animation: float-drift 20s ease-in-out infinite;
          opacity: 0.2;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
        .bg-gradient-radial {
          background: radial-gradient(circle, var(--tw-gradient-stops));
        }
      `}</style>
    </div>
  )
}

export default function ProfilePage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-background pt-32 pb-12">
        <div className="container mx-auto px-4 max-w-6xl">
          <div className="mb-8">
            <h1 className="text-4xl font-heading text-white mb-2">Profil Saya</h1>
            <p className="text-gray-400 font-body">Memuat...</p>
          </div>
        </div>
      </div>
    }>
      <ProfileContent />
    </Suspense>
  )
}
::::::::::::::
app/register/page.tsx
::::::::::::::
"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { apiClient } from "@/lib/api"
import { Loader2 } from "lucide-react"

export default function RegisterPage() {
  const router = useRouter()
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    role: "USER"
  })
  const [agreeToTerms, setAgreeToTerms] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)

    if (formData.password !== formData.confirmPassword) {
      setError("Passwords don't match!")
      return
    }

    if (!agreeToTerms) {
      setError("Please agree to the terms and conditions")
      return
    }

    if (formData.password.length < 6) {
      setError("Password must be at least 6 characters long")
      return
    }

    setIsLoading(true)

    try {
      const response = await apiClient.register(
        formData.username,
        formData.email,
        formData.password,
        formData.role
      )

      if (response.token) {
        apiClient.setToken(response.token)
        
        if (response.user.role === 'EO') {
          router.push('/eo/dashboard')
        } else {
          router.push('/events')
        }
      }
    } catch (err: any) {
      console.error('Registration error:', err)
      setError(err.message || 'Registration failed. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="relative min-h-screen overflow-hidden bg-gradient-to-br from-[#0a0a0a] via-[#1a0a2e] to-[#0a0a0a]">
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 -left-1/2 h-[200%] w-[200%] animate-spin-slow bg-gradient-to-r from-purple-500/10 via-transparent to-blue-500/10" />
        <div className="absolute top-1/4 right-1/4 h-96 w-96 animate-pulse rounded-full bg-purple-500/5 blur-3xl" />
        <div className="absolute bottom-1/4 left-1/4 h-96 w-96 animate-pulse rounded-full bg-blue-500/5 blur-3xl" />
      </div>

      <div className="relative z-10 flex min-h-screen items-center justify-center px-4 py-12">
        <div className="w-full max-w-md">
          <div className="glass-fx p-8">
            <div className="mb-8 text-center">
              <div className="mb-6 flex justify-center">
                <Image src="/images/app-logo.png" alt="App Logo" width={400} height={80} className="h-auto w-100" />
              </div>
              <h1 className="font-heading mb-2 text-4xl text-white">Create Account</h1>
              <p className="font-body text-white/60">Join us and start collecting tickets</p>
            </div>

            {error && (
              <div className="mb-6 p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
                <p className="text-red-400 font-body text-sm">{error}</p>
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-5">
              <div className="space-y-2">
                <Label htmlFor="username" className="font-body text-sm font-medium text-white/90">
                  Username
                </Label>
                <Input
                  id="username"
                  name="username"
                  type="text"
                  placeholder="johndoe"
                  value={formData.username}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="email" className="font-body text-sm font-medium text-white/90">
                  Email Address
                </Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  placeholder="you@example.com"
                  value={formData.email}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="role" className="font-body text-sm font-medium text-white/90">
                  Account Type
                </Label>
                <select
                  id="role"
                  name="role"
                  value={formData.role}
                  onChange={handleChange}
                  disabled={isLoading}
                  className="w-full h-9 px-3 rounded-md border border-white/20 bg-white/5 text-white text-sm focus:border-purple-500/50 focus:ring-purple-500/20 focus:outline-none"
                >
                  <option value="USER" className="bg-gray-800">Regular User</option>
                  <option value="EO" className="bg-gray-800">Event Organizer (EO)</option>
                </select>
                <p className="text-xs text-white/50 mt-1">
                  {formData.role === 'EO' 
                    ? 'EO accounts can create and manage events but cannot purchase tickets' 
                    : 'Regular users can purchase and collect tickets'}
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="password" className="font-body text-sm font-medium text-white/90">
                  Password
                </Label>
                <Input
                  id="password"
                  name="password"
                  type="password"
                  placeholder="••••••••"
                  value={formData.password}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="confirmPassword" className="font-body text-sm font-medium text-white/90">
                  Confirm Password
                </Label>
                <Input
                  id="confirmPassword"
                  name="confirmPassword"
                  type="password"
                  placeholder="••••••••"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                  className="font-body border-white/20 bg-white/5 text-white placeholder:text-white/40 focus:border-purple-500/50 focus:ring-purple-500/20"
                />
              </div>

              <div className="flex items-start space-x-2">
                <Checkbox
                  id="terms"
                  checked={agreeToTerms}
                  onCheckedChange={(checked) => setAgreeToTerms(checked as boolean)}
                  disabled={isLoading}
                  className="mt-1 border-white/20 data-[state=checked]:bg-purple-500 data-[state=checked]:border-purple-500"
                />
                <Label htmlFor="terms" className="font-body text-sm text-white/70 cursor-pointer leading-relaxed">
                  I agree to the{" "}
                  <Link href="#" className="text-purple-400 hover:text-purple-300 transition-colors">
                    Terms of Service
                  </Link>{" "}
                  and{" "}
                  <Link href="#" className="text-purple-400 hover:text-purple-300 transition-colors">
                    Privacy Policy
                  </Link>
                </Label>
              </div>

              <Button
                type="submit"
                disabled={isLoading}
                className="font-body w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 transition-all duration-300 shadow-lg shadow-purple-500/20"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Creating account...
                  </>
                ) : (
                  'Create Account'
                )}
              </Button>
            </form>

            <p className="font-body mt-6 text-center text-sm text-white/60">
              Already have an account?{" "}
              <Link href="/login" className="text-purple-400 hover:text-purple-300 transition-colors">
                Sign in
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}